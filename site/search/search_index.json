{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"System Rezerwacji Hotelowej","text":"<p>Witamy w dokumentacji systemu rezerwacji hotelowej \u2014 projektu stworzonego w ramach zaj\u0119\u0107 z in\u017cynierii oprogramowania.</p> <p>System umo\u017cliwia zarz\u0105dzanie pokojami hotelowymi, go\u015b\u0107mi, rezerwacjami oraz p\u0142atno\u015bciami poprzez prosty interfejs tekstowy (CLI). </p> <p>Dokumentacja zawiera opisy struktury projektu, klas danych, logiki dzia\u0142ania oraz zestaw test\u00f3w potwierdzaj\u0105cych poprawno\u015b\u0107 dzia\u0142ania aplikacji.</p>"},{"location":"#struktura-dokumentacji","title":"Struktura dokumentacji","text":"<ul> <li> <p>Klasy danych   Opis klas: <code>Guest</code>, <code>Room</code>, <code>Reservation</code>, <code>Hotel</code> i <code>Payment</code></p> </li> <li> <p>Logika aplikacyjna   Spos\u00f3b dzia\u0142ania systemu oraz powi\u0105zania mi\u0119dzy komponentami</p> </li> <li> <p>Interfejs u\u017cytkownika (CLI)   Przegl\u0105d dost\u0119pnych komend i interakcji z systemem</p> </li> <li> <p>Testy   Testy jednostkowe i integracyjne weryfikuj\u0105ce poprawno\u015b\u0107 dzia\u0142ania</p> </li> </ul>"},{"location":"#uruchomienie-projektu","title":"Uruchomienie projektu","text":"<ol> <li> <p>Zainstaluj zale\u017cno\u015bci:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Uruchom aplikacj\u0119:    <pre><code>python main.py\n</code></pre></p> </li> <li> <p>Otw\u00f3rz dokumentacj\u0119 lokalnie:    <pre><code>mkdocs serve\n</code></pre></p> </li> </ol>"},{"location":"#technologie-uzyte-w-projekcie","title":"Technologie u\u017cyte w projekcie","text":"<ul> <li>Python 3.12</li> <li>MkDocs + Material for MkDocs</li> <li><code>unittest</code> \u2013 testowanie jednostkowe i integracyjne</li> <li><code>mkdocstrings</code> \u2013 automatyczna dokumentacja kodu</li> </ul> <p>_Dokumentacja opracowana przez grup\u0119 tworz\u0105c\u0105 projekt.</p>"},{"location":"reference/index_klasy/","title":"Struktura projektu","text":"<p>Poni\u017cej przedstawiono szczeg\u00f3\u0142owy opis struktury projektu systemu rezerwacji hotelowej. Zawiera on dokumentacj\u0119 klas danych, logiki aplikacyjnej oraz interfejsu u\u017cytkownika.</p> <p>Ka\u017cdy komponent zosta\u0142 opisany w osobnym podrozdziale i zawiera:</p> <ul> <li>kr\u00f3tki opis funkcji klasy lub modu\u0142u,</li> <li>automatycznie wygenerowan\u0105 dokumentacj\u0119 techniczn\u0105 metod i atrybut\u00f3w,</li> <li>przyk\u0142adowy kod u\u017cycia w j\u0119zyku Python.</li> </ul>"},{"location":"reference/index_klasy/#klasy-danych","title":"Klasy danych","text":"<p>Reprezentuj\u0105 g\u0142\u00f3wne obiekty w systemie: go\u015bcia, pok\u00f3j, rezerwacj\u0119, p\u0142atno\u015b\u0107 i hotel.</p> <ul> <li>Guest \u2014 dane osobowe i kontaktowe go\u015bcia</li> <li>Room \u2014 informacje o pokoju hotelowym</li> <li>Reservation \u2014 szczeg\u00f3\u0142y dotycz\u0105ce rezerwacji</li> <li>Hotel \u2014 zarz\u0105dzanie pokojami i rezerwacjami</li> <li>Payment \u2014 obs\u0142uga p\u0142atno\u015bci</li> </ul>"},{"location":"reference/index_klasy/#logika-aplikacji","title":"Logika aplikacji","text":"<p>Opis g\u0142\u00f3wnej logiki biznesowej systemu, \u0142\u0105cz\u0105cej wszystkie komponenty w sp\u00f3jn\u0105 ca\u0142o\u015b\u0107.</p> <ul> <li>HotelService \u2014 zarz\u0105dza go\u015b\u0107mi, pokojami, rezerwacjami i p\u0142atno\u015bciami</li> </ul>"},{"location":"reference/index_klasy/#interfejs-uzytkownika-cli","title":"Interfejs u\u017cytkownika (CLI)","text":"<p>Modu\u0142 odpowiedzialny za obs\u0142ug\u0119 programu z poziomu wiersza polece\u0144.</p> <ul> <li>main.py \u2014 interfejs tekstowy umo\u017cliwiaj\u0105cy u\u017cytkownikowi wykonywanie operacji na systemie</li> </ul>"},{"location":"reference/main/","title":"G\u0142\u00f3wna aplikacja (CLI)","text":"<p>Modu\u0142 <code>main.py</code> pe\u0142ni rol\u0119 interfejsu tekstowego (CLI) umo\u017cliwiaj\u0105cego u\u017cytkownikowi interakcj\u0119 z systemem rezerwacji hotelowej.  </p> <p>Pozwala na dodawanie pokoi, rejestracj\u0119 go\u015bci, dokonywanie rezerwacji, op\u0142acanie, anulowanie i przegl\u0105danie rezerwacji, a tak\u017ce eksport danych.</p> <p>Ten modu\u0142 \u0142\u0105czy wszystkie komponenty aplikacji: modele, logik\u0119 i dane, umo\u017cliwiaj\u0105c ich u\u017cycie w praktyce.</p>"},{"location":"reference/main/#dostepne-funkcje-cli","title":"Dost\u0119pne funkcje CLI","text":"<p>System oferuje nast\u0119puj\u0105ce opcje:</p> <ol> <li>Dodaj pok\u00f3j \u2013 umo\u017cliwia dodanie nowego pokoju do hotelu  </li> <li>Zarejestruj go\u015bcia \u2013 dodaje nowego go\u015bcia do bazy  </li> <li>Utw\u00f3rz rezerwacj\u0119 \u2013 pozwala na zarezerwowanie pokoju  </li> <li>Zobacz dost\u0119pno\u015b\u0107 pokoi \u2013 sprawdza, kt\u00f3re pokoje s\u0105 wolne  </li> <li>Wy\u015bwietl rezerwacje \u2013 pokazuje wszystkie rezerwacje  </li> <li>Anuluj rezerwacj\u0119 \u2013 umo\u017cliwia anulowanie istniej\u0105cej rezerwacji  </li> <li>Potwierd\u017a p\u0142atno\u015b\u0107 \u2013 oznacza rezerwacj\u0119 jako op\u0142acon\u0105  </li> <li>Zwrot p\u0142atno\u015bci \u2013 pozwala zwr\u00f3ci\u0107 \u015brodki za rezerwacj\u0119  </li> <li>Sprawd\u017a pok\u00f3j go\u015bcia \u2013 pokazuje, w kt\u00f3rym pokoju przebywa go\u015b\u0107  </li> <li>Historia rezerwacji pokoju \u2013 przegl\u0105d rezerwacji danego pokoju  </li> <li>Historia p\u0142atno\u015bci go\u015bcia \u2013 lista wszystkich p\u0142atno\u015bci danego go\u015bcia  </li> <li>Eksport rezerwacji do CSV \u2013 generuje plik CSV z rezerwacjami</li> </ol> <p>U\u017cytkownik wybiera opcje za pomoc\u0105 klawiatury, a dane s\u0105 podawane interaktywnie przez <code>input()</code>.</p>"},{"location":"reference/main/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":""},{"location":"reference/main/#main.add_room","title":"<code>add_room()</code>","text":"<p>Interaktywne dodanie nowego pokoju do hotelu. Pobiera dane od u\u017cytkownika i tworzy instancj\u0119 Room.</p> Source code in <code>main.py</code> <pre><code>def add_room():\n    \"\"\"\n    Interaktywne dodanie nowego pokoju do hotelu.\n    Pobiera dane od u\u017cytkownika i tworzy instancj\u0119 Room.\n    \"\"\"\n    print(\"\\nDodawanie pokoju\")\n    number = input(\"Numer pokoju: \")\n    room_type = input(\"Typ pokoju (np. single, double): \")\n    try:\n        price = float(input(\"Cena za noc: \"))\n        capacity = int(input(\"Pojemno\u015b\u0107: \"))\n        room = Room(number, room_type, price, capacity)\n        hotel.add_room(room)\n        print(\"Pok\u00f3j dodany.\\n\")\n    except Exception as e:\n        print(f\"B\u0142\u0105d: {e}\\n\")\n</code></pre>"},{"location":"reference/main/#main.cancel_reservation","title":"<code>cancel_reservation()</code>","text":"<p>Anuluje istniej\u0105c\u0105 rezerwacj\u0119 na podstawie jej ID. Aktualizuje zbi\u00f3r <code>cancelled_reservations</code>.</p> Source code in <code>main.py</code> <pre><code>def cancel_reservation():\n    \"\"\"\n    Anuluje istniej\u0105c\u0105 rezerwacj\u0119 na podstawie jej ID.\n    Aktualizuje zbi\u00f3r `cancelled_reservations`.\n    \"\"\"\n    print(\"\\nAnulowanie rezerwacji\")\n    res_id = input(\"Podaj ID rezerwacji: \")\n    found = False\n    for res in hotel.get_all_reservations():\n        if res.reservation_id == res_id:\n            cancelled_reservations.add(res_id)\n            print(\"Rezerwacja anulowana.\\n\")\n            found = True\n            break\n    if not found:\n        print(\"Nie znaleziono rezerwacji.\\n\")\n</code></pre>"},{"location":"reference/main/#main.check_guest_room","title":"<code>check_guest_room()</code>","text":"<p>Sprawdza, w jakim pokoju przebywa go\u015b\u0107 w podanym dniu. Weryfikuje aktywne rezerwacje go\u015bcia.</p> Source code in <code>main.py</code> <pre><code>def check_guest_room():\n    \"\"\"\n    Sprawdza, w jakim pokoju przebywa go\u015b\u0107 w podanym dniu.\n    Weryfikuje aktywne rezerwacje go\u015bcia.\n    \"\"\"\n    print(\"\\nSprawdzenie pokoju go\u015bcia\")\n    guest_id = input(\"Podaj ID go\u015bcia: \")\n    date_to_check = get_date(\"Data (YYYY-MM-DD): \")\n    reservations = guest_reservations.get(guest_id, [])\n    for res in reservations:\n        if res.reservation_id not in cancelled_reservations and res.check_in &lt;= date_to_check &lt; res.check_out:\n            print(f\"Go\u015b\u0107 przebywa w pokoju {res.room.number}.\")\n            return\n    print(\"Go\u015b\u0107 nie ma aktywnej rezerwacji w tym dniu.\\n\")\n</code></pre>"},{"location":"reference/main/#main.confirm_payment","title":"<code>confirm_payment()</code>","text":"<p>Potwierdza p\u0142atno\u015b\u0107 za rezerwacj\u0119 na podstawie ID p\u0142atno\u015bci.</p> Source code in <code>main.py</code> <pre><code>def confirm_payment():\n    \"\"\"\n    Potwierdza p\u0142atno\u015b\u0107 za rezerwacj\u0119 na podstawie ID p\u0142atno\u015bci.\n    \"\"\"\n    print(\"\\nPotwierdzenie p\u0142atno\u015bci\")\n    payment_id = input(\"Podaj ID p\u0142atno\u015bci: \")\n    payment = payments.get(payment_id)\n    if not payment:\n        print(\"Nie znaleziono p\u0142atno\u015bci.\\n\")\n        return\n\n    try:\n        payment.confirm_payment()\n        print(\"P\u0142atno\u015b\u0107 potwierdzona.\")\n        print(payment)\n    except Exception as e:\n        print(f\"B\u0142\u0105d: {e}\\n\")\n</code></pre>"},{"location":"reference/main/#main.export_reservations_to_csv","title":"<code>export_reservations_to_csv()</code>","text":"<p>Eksportuje wszystkie rezerwacje do pliku CSV o nazwie <code>rezerwacje_export.csv</code>. Plik zawiera dane go\u015bcia, pokoju, daty oraz status.</p> Source code in <code>main.py</code> <pre><code>def export_reservations_to_csv():\n    \"\"\"\n    Eksportuje wszystkie rezerwacje do pliku CSV o nazwie `rezerwacje_export.csv`.\n    Plik zawiera dane go\u015bcia, pokoju, daty oraz status.\n    \"\"\"\n    filename = \"rezerwacje_export.csv\"\n    with open(filename, mode='w', newline='', encoding='utf-8') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"ID\", \"Go\u015b\u0107\", \"Pok\u00f3j\", \"Zameldowanie\", \"Wymeldowanie\", \"Noce\", \"Cena\", \"Status\"])\n        for res in hotel.get_all_reservations():\n            summary = res.get_summary()\n            status = \"Anulowana\" if res.reservation_id in cancelled_reservations else \"Aktywna\"\n            writer.writerow([\n                summary[\"reservation_id\"],\n                summary[\"guest_name\"],\n                summary[\"room_number\"],\n                summary[\"check_in\"],\n                summary[\"check_out\"],\n                summary[\"nights\"],\n                summary[\"total_price\"],\n                status\n            ])\n    print(f\"Rezerwacje zapisane do {filename}\\n\")\n</code></pre>"},{"location":"reference/main/#main.get_date","title":"<code>get_date(prompt)</code>","text":"<p>Prosi u\u017cytkownika o dat\u0119 w formacie RRRR-MM-DD.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Komunikat wy\u015bwietlany u\u017cytkownikowi.</p> required <p>Returns:</p> Name Type Description <code>date</code> <p>Obiekt daty (datetime.date).</p> Source code in <code>main.py</code> <pre><code>def get_date(prompt):\n    \"\"\"\n    Prosi u\u017cytkownika o dat\u0119 w formacie RRRR-MM-DD.\n\n    Args:\n        prompt (str): Komunikat wy\u015bwietlany u\u017cytkownikowi.\n\n    Returns:\n        date: Obiekt daty (datetime.date).\n    \"\"\"\n    while True:\n        try:\n            return datetime.strptime(input(prompt), \"%Y-%m-%d\").date()\n        except ValueError:\n            print(\"B\u0142\u0105d: nieprawid\u0142owy format. Podaj dat\u0119 w formacie RRRR-MM-DD.\")\n</code></pre>"},{"location":"reference/main/#main.list_reservations","title":"<code>list_reservations()</code>","text":"<p>Wy\u015bwietla wszystkie rezerwacje w systemie wraz ze statusem (aktywna/anulowana).</p> Source code in <code>main.py</code> <pre><code>def list_reservations():\n    \"\"\"\n    Wy\u015bwietla wszystkie rezerwacje w systemie wraz ze statusem (aktywna/anulowana).\n    \"\"\"\n    print(\"\\nLista rezerwacji:\")\n    for res in hotel.get_all_reservations():\n        status = \"Anulowana\" if res.reservation_id in cancelled_reservations else \"Aktywna\"\n        print(f\"Rezerwacja {res.reservation_id} - {res.guest.get_full_name()} - Pok\u00f3j {res.room.number} - Status: {status}\")\n    print()\n</code></pre>"},{"location":"reference/main/#main.main_menu","title":"<code>main_menu()</code>","text":"<p>G\u0142\u00f3wne menu aplikacji hotelowej. Obs\u0142uguje wyb\u00f3r u\u017cytkownika i przekierowuje do odpowiednich funkcji.</p> Source code in <code>main.py</code> <pre><code>def main_menu():\n    \"\"\"\n    G\u0142\u00f3wne menu aplikacji hotelowej.\n    Obs\u0142uguje wyb\u00f3r u\u017cytkownika i przekierowuje do odpowiednich funkcji.\n    \"\"\"\n    while True:\n        print(\"========= SYSTEM HOTELU =========\")\n        print(\"1. Dodaj pok\u00f3j\")\n        print(\"2. Zarejestruj go\u015bcia\")\n        print(\"3. Utw\u00f3rz rezerwacj\u0119\")\n        print(\"4. Zobacz dost\u0119pno\u015b\u0107 pokoi\")\n        print(\"5. Wy\u015bwietl rezerwacje\")\n        print(\"6. Anuluj rezerwacj\u0119\")\n        print(\"7. Potwierd\u017a p\u0142atno\u015b\u0107\")\n        print(\"8. Zwrot p\u0142atno\u015bci\")\n        print(\"9. Sprawd\u017a pok\u00f3j go\u015bcia\")\n        print(\"10. Historia rezerwacji pokoju\")\n        print(\"11. Historia p\u0142atno\u015bci go\u015bcia\")\n        print(\"12. Eksport rezerwacji do CSV\")\n        print(\"0. Wyj\u015bcie\")\n        choice = input(\"Wybierz opcj\u0119: \")\n\n        if choice == \"1\":\n            add_room()\n        elif choice == \"2\":\n            register_guest()\n        elif choice == \"3\":\n            make_reservation()\n        elif choice == \"4\":\n            show_available_rooms()\n        elif choice == \"5\":\n            list_reservations()\n        elif choice == \"6\":\n            cancel_reservation()\n        elif choice == \"7\":\n            confirm_payment()\n        elif choice == \"8\":\n            refund_payment()\n        elif choice == \"9\":\n            check_guest_room()\n        elif choice == \"10\":\n            show_room_reservations()\n        elif choice == \"11\":\n            show_guest_payments()\n        elif choice == \"12\":\n            export_reservations_to_csv()\n        elif choice == \"0\":\n            print(\"Do zobaczenia!\")\n            break\n        else:\n            print(\"Nieznana opcja.\\n\")\n</code></pre>"},{"location":"reference/main/#main.make_reservation","title":"<code>make_reservation()</code>","text":"<p>Tworzy now\u0105 rezerwacj\u0119 dla zarejestrowanego go\u015bcia. Sprawdza dost\u0119pno\u015b\u0107 pokoi, zapisuje rezerwacj\u0119 i inicjuje p\u0142atno\u015b\u0107.</p> Source code in <code>main.py</code> <pre><code>def make_reservation():\n    \"\"\"\n    Tworzy now\u0105 rezerwacj\u0119 dla zarejestrowanego go\u015bcia.\n    Sprawdza dost\u0119pno\u015b\u0107 pokoi, zapisuje rezerwacj\u0119 i inicjuje p\u0142atno\u015b\u0107.\n    \"\"\"\n    print(\"\\nTworzenie rezerwacji\")\n    guest_id = input(\"Podaj ID go\u015bcia: \")\n    guest = guests.get(guest_id)\n    if not guest:\n        print(\"Nie znaleziono go\u015bcia.\\n\")\n        return\n\n    check_in = get_date(\"Data zameldowania (YYYY-MM-DD): \")\n    check_out = get_date(\"Data wymeldowania (YYYY-MM-DD): \")\n\n    print(\"Dost\u0119pne pokoje:\")\n    available_rooms = []\n    for room in hotel.get_all_rooms():\n        if hotel.is_room_available(room, check_in, check_out):\n            available_rooms.append(room)\n            print(room)\n\n    if not available_rooms:\n        print(\"Brak dost\u0119pnych pokoi w tym terminie.\\n\")\n        return\n\n    room_number = input(\"Numer pokoju do rezerwacji: \")\n    room = hotel.find_room_by_number(room_number)\n    if not room or not hotel.is_room_available(room, check_in, check_out):\n        print(\"Pok\u00f3j niedost\u0119pny.\\n\")\n        return\n\n    try:\n        reservation = hotel.make_reservation(guest, room_number, check_in, check_out)\n        guest_reservations[guest.guest_id].append(reservation)\n        print(\"Rezerwacja utworzona.\")\n        for key, value in reservation.get_summary().items():\n            print(f\"{key}: {value}\")\n\n        method = input(\"Metoda p\u0142atno\u015bci (karta/got\u00f3wka): \").strip().lower()\n        payment = Payment(reservation, method)\n        payments[payment.payment_id] = payment\n        print(f\"P\u0142atno\u015b\u0107 utworzona. ID: {payment.payment_id}\\n\")\n\n    except Exception as e:\n        print(f\"B\u0142\u0105d: {e}\\n\")\n</code></pre>"},{"location":"reference/main/#main.refund_payment","title":"<code>refund_payment()</code>","text":"<p>Zarejestrowanie zwrotu p\u0142atno\u015bci. Weryfikuje, czy p\u0142atno\u015b\u0107 zosta\u0142a wcze\u015bniej op\u0142acona i nie zosta\u0142a ju\u017c zwr\u00f3cona.</p> Source code in <code>main.py</code> <pre><code>def refund_payment():\n    \"\"\"\n    Zarejestrowanie zwrotu p\u0142atno\u015bci.\n    Weryfikuje, czy p\u0142atno\u015b\u0107 zosta\u0142a wcze\u015bniej op\u0142acona i nie zosta\u0142a ju\u017c zwr\u00f3cona.\n    \"\"\"\n    print(\"\\nZwrot p\u0142atno\u015bci\")\n    payment_id = input(\"Podaj ID p\u0142atno\u015bci: \")\n    payment = payments.get(payment_id)\n    if not payment or not payment.is_paid():\n        print(\"Nie znaleziono op\u0142aconej p\u0142atno\u015bci.\\n\")\n        return\n    if payment_id in refunded_payments:\n        print(\"Ta p\u0142atno\u015b\u0107 zosta\u0142a ju\u017c zwr\u00f3cona.\\n\")\n        return\n\n    refunded_payments.add(payment_id)\n    print(\"Zwrot zosta\u0142 zarejestrowany.\\n\")\n</code></pre>"},{"location":"reference/main/#main.register_guest","title":"<code>register_guest()</code>","text":"<p>Rejestruje nowego go\u015bcia hotelowego. Tworzy instancj\u0119 Guest i zapisuje j\u0105 do s\u0142ownika <code>guests</code>.</p> Source code in <code>main.py</code> <pre><code>def register_guest():\n    \"\"\"\n    Rejestruje nowego go\u015bcia hotelowego.\n    Tworzy instancj\u0119 Guest i zapisuje j\u0105 do s\u0142ownika `guests`.\n    \"\"\"\n    print(\"\\nRejestracja go\u015bcia\")\n    first = input(\"Imi\u0119: \")\n    last = input(\"Nazwisko: \")\n    email = input(\"Email: \")\n    phone = input(\"Telefon: \")\n    try:\n        guest = Guest(first, last, email, phone)\n        guests[guest.guest_id] = guest\n        guest_reservations[guest.guest_id] = []\n        print(f\"Go\u015b\u0107 zarejestrowany. ID: {guest.guest_id}\\n\")\n    except Exception as e:\n        print(f\"B\u0142\u0105d: {e}\\n\")\n</code></pre>"},{"location":"reference/main/#main.show_available_rooms","title":"<code>show_available_rooms()</code>","text":"<p>Wy\u015bwietla dost\u0119pne pokoje w zadanym przedziale dat. Pobiera daty od u\u017cytkownika i przeszukuje list\u0119 pokoi.</p> Source code in <code>main.py</code> <pre><code>def show_available_rooms():\n    \"\"\"\n    Wy\u015bwietla dost\u0119pne pokoje w zadanym przedziale dat.\n    Pobiera daty od u\u017cytkownika i przeszukuje list\u0119 pokoi.\n    \"\"\"\n    print(\"\\nDost\u0119pno\u015b\u0107 pokoi\")\n    check_in = get_date(\"Data zameldowania (YYYY-MM-DD): \")\n    check_out = get_date(\"Data wymeldowania (YYYY-MM-DD): \")\n\n    print(\"Dost\u0119pne pokoje:\")\n    available = []\n\n    for room in hotel.get_all_rooms():\n        if hotel.is_room_available(room, check_in, check_out):\n            available.append(room)\n            print(room)\n\n    if not available:\n        print(\"Brak dost\u0119pnych pokoi w tym terminie.\\n\")\n    else:\n        print()\n</code></pre>"},{"location":"reference/main/#main.show_guest_payments","title":"<code>show_guest_payments()</code>","text":"<p>Pokazuje histori\u0119 p\u0142atno\u015bci dla danego go\u015bcia. Wskazuje status ka\u017cdej p\u0142atno\u015bci (op\u0142acona/nieop\u0142acona/zwr\u00f3cona).</p> Source code in <code>main.py</code> <pre><code>def show_guest_payments():\n    \"\"\"\n    Pokazuje histori\u0119 p\u0142atno\u015bci dla danego go\u015bcia.\n    Wskazuje status ka\u017cdej p\u0142atno\u015bci (op\u0142acona/nieop\u0142acona/zwr\u00f3cona).\n    \"\"\"\n    print(\"\\nHistoria p\u0142atno\u015bci go\u015bcia\")\n    guest_id = input(\"Podaj ID go\u015bcia: \")\n    for pay in payments.values():\n        if pay.reservation.guest.guest_id == guest_id:\n            status = \"ZWR\u00d3CONA\" if pay.payment_id in refunded_payments else (\"OP\u0141ACONA\" if pay.paid else \"NIEOP\u0141ACONA\")\n            print(f\"{pay} - Status: {status}\")\n    print()\n</code></pre>"},{"location":"reference/main/#main.show_room_reservations","title":"<code>show_room_reservations()</code>","text":"<p>Wy\u015bwietla histori\u0119 wszystkich rezerwacji danego pokoju. Wypisuje szczeg\u00f3\u0142y ka\u017cdej rezerwacji.</p> Source code in <code>main.py</code> <pre><code>def show_room_reservations():\n    \"\"\"\n    Wy\u015bwietla histori\u0119 wszystkich rezerwacji danego pokoju.\n    Wypisuje szczeg\u00f3\u0142y ka\u017cdej rezerwacji.\n    \"\"\"\n    print(\"Historia rezerwacji pokoju\")\n    room_number = input(\"Podaj numer pokoju: \")\n    found = False\n    for res in hotel.get_all_reservations():\n        if isinstance(res, Reservation) and res.room.number == room_number:\n            print(\"---\")\n            print(f\"ID: {res.reservation_id}\")\n            print(f\"Go\u015b\u0107: {res.guest.get_full_name()}\")\n            print(f\"Pok\u00f3j: {res.room.number}\")\n            print(f\"Zameldowanie: {res.check_in}\")\n            print(f\"Wymeldowanie: {res.check_out}\")\n            print(f\"Liczba nocy: {res.get_duration()}\")\n            print(f\"Cena ca\u0142kowita: {res.get_total_price()} z\u0142\")\n            print(\"Status: Anulowana\" if res.reservation_id in cancelled_reservations else \"Status: Aktywna\")\n            print()\n            found = True\n    if not found:\n        print(\"Brak rezerwacji dla tego pokoju.\")\n</code></pre>"},{"location":"reference/main/#przykad-uruchomienia","title":"Przyk\u0142ad uruchomienia","text":"<pre><code>python main.py\n</code></pre>"},{"location":"reference/models/guest/","title":"Klasa <code>Guest</code>","text":"<p>Klasa <code>Guest</code> reprezentuje pojedynczego go\u015bcia w systemie rezerwacji hotelowej.</p> <p>S\u0142u\u017cy do przechowywania podstawowych danych osobowych i kontaktowych, takich jak imi\u0119, nazwisko, e-mail czy numer telefonu.</p>"},{"location":"reference/models/guest/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Reprezentuje go\u015bcia hotelu.</p> Atrybuty <p>guest_id (str): Unikatowy identyfikator go\u015bcia hotelu. first_name (str): Imi\u0119 go\u015bcia. last_name (str): Nazwisko go\u015bcia. email (str): Adres e-mail go\u015bcia. phone_number (str): Numer telefonu go\u015bcia.</p> <p>Inicjalizuje obiekt Guest z unikalnym ID.</p> Source code in <code>models/guest.py</code> <pre><code>def __init__(self, first_name: str, last_name: str, email: str, phone_number: str):\n    \"\"\"Inicjalizuje obiekt Guest z unikalnym ID.\"\"\"\n    if not first_name or not isinstance(first_name, str):\n        raise ValueError(\"Imi\u0119 nie mo\u017ce by\u0107 puste.\")\n    if not last_name or not isinstance(last_name, str):\n         raise ValueError(\"Nazwisko nie mo\u017ce by\u0107 puste.\")\n    if not email or \"@\" not in email or \".\" not in email.split(\"@\")[1]:\n         raise ValueError(\"Nieprawid\u0142owy format adresu e-mail.\")\n    if not phone_number or not isinstance(phone_number, str):\n         raise ValueError(\"Numer telefonu nie mo\u017ce by\u0107 pusty.\")\n\n\n    self.guest_id: str = str(uuid.uuid4())\n    self.first_name: str = first_name\n    self.last_name: str = last_name\n    self.email: str = email\n    self.phone_number: str = phone_number\n</code></pre>"},{"location":"reference/models/guest/#models.guest.Guest.get_contact_info","title":"<code>get_contact_info()</code>","text":"<p>Zwraca informacje kontaktowe go\u015bcia.</p> Zwraca <p>Dict[str, str]: S\u0142ownik z adresem e-mail i numerem telefonu.</p> Source code in <code>models/guest.py</code> <pre><code>def get_contact_info(self) -&gt; Dict[str, str]:\n    \"\"\"Zwraca informacje kontaktowe go\u015bcia.\n\n    Zwraca:\n        Dict[str, str]: S\u0142ownik z adresem e-mail i numerem telefonu.\n    \"\"\"\n    return {\"email\": self.email, \"phone_number\": self.phone_number}\n</code></pre>"},{"location":"reference/models/guest/#models.guest.Guest.get_full_name","title":"<code>get_full_name()</code>","text":"<p>Zwraca pe\u0142ne imi\u0119 go\u015bcia.</p> Zwraca <p>str: Imi\u0119 i nazwisko.</p> Source code in <code>models/guest.py</code> <pre><code>def get_full_name(self) -&gt; str:\n    \"\"\"Zwraca pe\u0142ne imi\u0119 go\u015bcia.\n\n    Zwraca:\n        str: Imi\u0119 i nazwisko.\n    \"\"\"\n    return f\"{self.first_name} {self.last_name}\"\n</code></pre>"},{"location":"reference/models/guest/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from models.guest import Guest\n\ngosc = Guest(\"Anna\", \"Nowak\", \"anna.nowak@email.com\", \"123456789\")\nprint(gosc.get_full_name())\nprint(gosc.get_contact_info())\n</code></pre>"},{"location":"reference/models/hotel/","title":"Klasa <code>Hotel</code>","text":"<p>Klasa <code>Hotel</code> reprezentuje obiekt hotelowy w systemie rezerwacji. Odpowiada za przechowywanie listy pokoi i rezerwacji oraz zarz\u0105dzanie ich dost\u0119pno\u015bci\u0105 i tworzeniem nowych rezerwacji.</p> <p>Zawiera logik\u0119 sprawdzaj\u0105c\u0105 dost\u0119pno\u015b\u0107 pokoi, filtrowanie po typie i pojemno\u015bci oraz sprawdza konflikty w rezerwacjach.</p>"},{"location":"reference/models/hotel/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Reprezentuje hotel i zarz\u0105dza pokojami oraz rezerwacjami.</p> Source code in <code>models/hotel.py</code> <pre><code>def __init__(self, name: str, address: str):\n    if not name or not isinstance(name, str):\n        raise ValueError(\"Nazwa hotelu musi zawiera\u0107 conajniej 1 znak.\")\n    if not address or not isinstance(address, str):\n        raise ValueError(\"Adres hotelu musi zawiera\u0107 conajniej 1 znak.\")\n\n    self.name: str = name\n    self.address: str = address\n    self.rooms: Dict[str, Room] = {}\n    self.reservations: List[Reservation] = []\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.add_room","title":"<code>add_room(room)</code>","text":"<p>Dodaje pok\u00f3j do hotelu.</p> Source code in <code>models/hotel.py</code> <pre><code>def add_room(self, room: Room) -&gt; None:\n    \"\"\"Dodaje pok\u00f3j do hotelu.\"\"\"\n    if not isinstance(room, Room):\n        raise TypeError(\"Mo\u017cna doda\u0107 tylko obiekty klasy Room.\")\n    if room.number in self.rooms:\n        raise ValueError(f\"Pok\u00f3j o numerze {room.number} ju\u017c istnieje.\")\n    self.rooms[room.number] = room\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.filter_rooms","title":"<code>filter_rooms(room_type=None, capacity=None)</code>","text":"<p>Filtruje pokoje po typie i/lub pojemno\u015bci.</p> Source code in <code>models/hotel.py</code> <pre><code>def filter_rooms(self, room_type: Optional[str] = None, capacity: Optional[int] = None) -&gt; List[Room]:\n    \"\"\"Filtruje pokoje po typie i/lub pojemno\u015bci.\"\"\"\n    filtered = list(self.rooms.values())\n\n    if room_type:\n        filtered = [r for r in filtered if r.room_type.lower() == room_type.lower()]\n\n    if capacity:\n        filtered = [r for r in filtered if r.capacity &gt;= capacity]\n\n    return filtered\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.find_room_by_number","title":"<code>find_room_by_number(number)</code>","text":"<p>Zwraca pok\u00f3j o podanym numerze (je\u015bli istnieje).</p> Source code in <code>models/hotel.py</code> <pre><code>def find_room_by_number(self, number: str) -&gt; Optional[Room]:\n    \"\"\"Zwraca pok\u00f3j o podanym numerze (je\u015bli istnieje).\"\"\"\n    return self.rooms.get(number)\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.get_all_reservations","title":"<code>get_all_reservations()</code>","text":"<p>Zwraca list\u0119 wszystkich rezerwacji w hotelu.</p> Source code in <code>models/hotel.py</code> <pre><code>def get_all_reservations(self) -&gt; List[Reservation]:\n    \"\"\"Zwraca list\u0119 wszystkich rezerwacji w hotelu.\"\"\"\n    return self.reservations\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.get_all_rooms","title":"<code>get_all_rooms()</code>","text":"<p>Zwraca list\u0119 wszystkich pokoi w hotelu.</p> Source code in <code>models/hotel.py</code> <pre><code>def get_all_rooms(self) -&gt; List[Room]:\n    \"\"\"Zwraca list\u0119 wszystkich pokoi w hotelu.\"\"\"\n    return list(self.rooms.values())\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.is_room_available","title":"<code>is_room_available(room, check_in, check_out)</code>","text":"<p>Sprawdza, czy pok\u00f3j jest dost\u0119pny w danym zakresie dat.</p> Source code in <code>models/hotel.py</code> <pre><code>def is_room_available(self, room: Room, check_in: date, check_out: date) -&gt; bool:\n    \"\"\"Sprawdza, czy pok\u00f3j jest dost\u0119pny w danym zakresie dat.\"\"\"\n    for reservation in self.reservations:\n        if reservation.room == room:\n            if check_in &lt; reservation.check_out and check_out &gt; reservation.check_in:\n                return False\n    return True\n</code></pre>"},{"location":"reference/models/hotel/#models.hotel.Hotel.make_reservation","title":"<code>make_reservation(guest, room_number, check_in, check_out)</code>","text":"<p>Tworzy rezerwacj\u0119, je\u015bli pok\u00f3j jest dost\u0119pny w podanym zakresie dat.</p> Source code in <code>models/hotel.py</code> <pre><code>def make_reservation(self, guest: Guest, room_number: str, check_in: date, check_out: date) -&gt; Reservation:\n    \"\"\"Tworzy rezerwacj\u0119, je\u015bli pok\u00f3j jest dost\u0119pny w podanym zakresie dat.\"\"\"\n    room = self.rooms.get(room_number)\n    if not room:\n        raise ValueError(f\"Pok\u00f3j {room_number} nie istnieje.\")\n    if not self.is_room_available(room, check_in, check_out):\n        raise ValueError(f\"Pok\u00f3j {room_number} jest ju\u017c zarezerwowany w tym terminie.\")\n\n    reservation = Reservation(guest, room, check_in, check_out)\n    self.reservations.append(reservation)\n    return reservation\n</code></pre>"},{"location":"reference/models/hotel/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from models.hotel import Hotel\nfrom models.room import Room\nfrom models.guest import Guest\nfrom datetime import date\n\nhotel = Hotel(\"Hotel ChatGPT\", \"ul. Przyk\u0142adowa 5\")\nroom = Room(\"101\", \"double\", 200.0, 2)\nhotel.add_room(room)\n\nguest = Guest(\"Anna\", \"Nowak\", \"anna.nowak@email.com\", \"123456789\")\nreservation = hotel.make_reservation(guest, \"101\", date(2025, 7, 1), date(2025, 7, 3))\n\nprint(hotel.get_all_rooms())\nprint(hotel.get_all_reservations())\n</code></pre>"},{"location":"reference/models/payment/","title":"Klasa <code>Payment</code>","text":"<p>Klasa <code>Payment</code> reprezentuje p\u0142atno\u015b\u0107 powi\u0105zan\u0105 z rezerwacj\u0105 w systemie hotelowym. Obs\u0142uguje informacje o metodzie p\u0142atno\u015bci, statusie, kwocie oraz dacie jej realizacji.</p> <p>Dzi\u0119ki tej klasie mo\u017cna potwierdzi\u0107 p\u0142atno\u015b\u0107, sprawdzi\u0107 czy zosta\u0142a zrealizowana oraz uzyska\u0107 podsumowanie.</p>"},{"location":"reference/models/payment/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Reprezentuje p\u0142atno\u015b\u0107 za konkretn\u0105 rezerwacj\u0119.</p> Source code in <code>models/payment.py</code> <pre><code>def __init__(self, reservation: Reservation, method: Literal[\"karta\", \"got\u00f3wka\"]):\n    if not isinstance(reservation, Reservation):\n        raise TypeError(\"Rezerwacja nie znaleziona.\")\n    if method not in (\"karta\", \"got\u00f3wka\"):\n        raise ValueError(\"Metoda p\u0142atno\u015bci musi by\u0107 'karta' lub 'got\u00f3wka'.\")\n\n    self.payment_id: str = str(uuid.uuid4())\n    self.reservation: Reservation = reservation\n    self.method: str = method\n    self.amount: float = reservation.get_total_price()\n    self.paid: bool = False\n    self.payment_date: Optional[datetime] = None\n</code></pre>"},{"location":"reference/models/payment/#models.payment.Payment.confirm_payment","title":"<code>confirm_payment()</code>","text":"<p>Oznacza p\u0142atno\u015b\u0107 jako zako\u0144czon\u0105.</p> Source code in <code>models/payment.py</code> <pre><code>def confirm_payment(self) -&gt; None:\n    \"\"\"Oznacza p\u0142atno\u015b\u0107 jako zako\u0144czon\u0105.\"\"\"\n    if self.paid:\n        raise ValueError(\"P\u0142atno\u015b\u0107 zosta\u0142a ju\u017c wcze\u015bniej potwierdzona.\")\n    self.paid = True\n    self.payment_date = datetime.now()\n</code></pre>"},{"location":"reference/models/payment/#models.payment.Payment.get_summary","title":"<code>get_summary()</code>","text":"<p>Zwraca podsumowanie p\u0142atno\u015bci.</p> Source code in <code>models/payment.py</code> <pre><code>def get_summary(self) -&gt; Dict[str, Any]:\n    \"\"\"Zwraca podsumowanie p\u0142atno\u015bci.\"\"\"\n    return {\n        \"payment_id\": self.payment_id,\n        \"reservation_id\": self.reservation.reservation_id,\n        \"guest_name\": self.reservation.guest.get_full_name(),\n        \"amount\": self.amount,\n        \"method\": self.method,\n        \"paid\": self.paid,\n        \"payment_date\": self.payment_date.isoformat() if self.payment_date else None\n    }\n</code></pre>"},{"location":"reference/models/payment/#models.payment.Payment.is_paid","title":"<code>is_paid()</code>","text":"<p>Sprawdza, czy p\u0142atno\u015b\u0107 zosta\u0142a ju\u017c zrealizowana.</p> Source code in <code>models/payment.py</code> <pre><code>def is_paid(self) -&gt; bool:\n    \"\"\"Sprawdza, czy p\u0142atno\u015b\u0107 zosta\u0142a ju\u017c zrealizowana.\"\"\"\n    return self.paid\n</code></pre>"},{"location":"reference/models/payment/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from models.payment import Payment\nfrom models.reservation import Reservation\nfrom models.guest import Guest\nfrom models.room import Room\nfrom datetime import date\n\nguest = Guest(\"Jan\", \"Kowalski\", \"jan@example.com\", \"123456789\")\nroom = Room(\"101\", \"single\", 150.0, 1)\nreservation = Reservation(guest, room, date(2025, 7, 10), date(2025, 7, 12))\n\npayment = Payment(reservation, method=\"karta\")\nprint(payment.is_paid())\npayment.confirm_payment()\nprint(payment.get_summary())\n</code></pre>"},{"location":"reference/models/reservation/","title":"Klasa <code>Reservation</code>","text":"<p>Klasa <code>Reservation</code> reprezentuje pojedyncz\u0105 rezerwacj\u0119 dokonan\u0105 przez go\u015bcia w systemie hotelowym.</p> <p>Zawiera informacje o dacie zameldowania, wymeldowania, wybranym pokoju oraz osobie dokonuj\u0105cej rezerwacji.  </p> <p>Pozwala obliczy\u0107 \u0142\u0105czny koszt pobytu, liczb\u0119 nocy oraz wygenerowa\u0107 podsumowanie rezerwacji.</p>"},{"location":"reference/models/reservation/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Reprezentuje rezerwacj\u0119 dokonan\u0105 przez go\u015bcia hotelu.</p> Atrybuty <p>reservation_id (str): Unikalny identyfikator rezerwacji. guest (Guest): Go\u015b\u0107 hotelu dokonuj\u0105cy rezerwacji. room (Room): Pok\u00f3j, kt\u00f3ry zosta\u0142 zarezerwowany. check_in (date): Data zameldowania. check_out (date): Data wymeldowania.</p> <p>Inicjalizuje obiekt klasy Reservation. Args:     guest: Guest: Go\u015b\u0107 hotelu.     room: Room: Pok\u00f3j hotelowy.     check_in: date: Data zameldowania.     check_out: date: Data wymeldowania.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>Je\u015bli go\u015b\u0107 nie jest prawid\u0142owym obiektem klasy Guest np. nie istnieje go\u015b\u0107 o danym imieniu i nazwisku,</p> <code>TypeError</code> <p>Je\u015bli pok\u00f3j nie jest prawid\u0142owym obiektem klasy Room np. podano pok\u00f3j numer 101, gdy hotel posiada pokoje do numeru 100,</p> <code>TypeError</code> <p>Je\u015bli data zosta\u0142a podana w nieprawid\u0142owym formacie np. check_in = date(2025, 7, 23), zamiast check_in= \u201e2025-07-23\u201d,</p> <code>ValueError</code> <p>Je\u015bli data wymeldowania jest wcze\u015bniejsza ni\u017c zameldowania np. check_in = date(2025-07-23), check_out = date(2025-07-21).</p> <p>Dzi\u0119ki temu program nie przyjmie niepoprawnych danych i nie stworzy b\u0142\u0119dnej rezerwacji. Po sprawdzeniu poprawno\u015bci danych, program tworzy nowy obiekt rezerwacji, zgodnie z zadeklarowanymi atrybutami, i przypisuje mu dane.</p> Source code in <code>models/reservation.py</code> <pre><code>def __init__(self, guest: Guest, room: Room, check_in: date, check_out: date):\n    \"\"\"Inicjalizuje obiekt klasy Reservation.\n    Args:\n        guest: Guest: Go\u015b\u0107 hotelu.\n        room: Room: Pok\u00f3j hotelowy.\n        check_in: date: Data zameldowania.\n        check_out: date: Data wymeldowania.\n\n    Raises:\n        TypeError: Je\u015bli go\u015b\u0107 nie jest prawid\u0142owym obiektem klasy Guest np. nie istnieje go\u015b\u0107 o danym imieniu i nazwisku,\n        TypeError: Je\u015bli pok\u00f3j nie jest prawid\u0142owym obiektem klasy Room np. podano pok\u00f3j numer 101, gdy hotel posiada pokoje do numeru 100,\n        TypeError: Je\u015bli data zosta\u0142a podana w nieprawid\u0142owym formacie np. check_in = date(2025, 7, 23), zamiast check_in= \u201e2025-07-23\u201d,\n        ValueError: Je\u015bli data wymeldowania jest wcze\u015bniejsza ni\u017c zameldowania np. check_in = date(2025-07-23), check_out = date(2025-07-21).\n    Dzi\u0119ki temu program nie przyjmie niepoprawnych danych i nie stworzy b\u0142\u0119dnej rezerwacji.\n    Po sprawdzeniu poprawno\u015bci danych, program tworzy nowy obiekt rezerwacji, zgodnie z zadeklarowanymi atrybutami, i przypisuje mu dane.\n    \"\"\"\n    if not isinstance(guest, Guest):\n        raise TypeError(\"Podany go\u015b\u0107 nie istnieje. Go\u015b\u0107 musi nale\u017ce\u0107 do klasy Guest.\")\n    if not isinstance(room, Room):\n        raise TypeError(\"Podany pok\u00f3j nie istnieje. Pok\u00f3j musi nale\u017ce\u0107 do klasy Room.\")\n    if not isinstance(check_in, date) or not isinstance(check_out, date):\n        raise TypeError(\"Data zameldowania i wymeldowania musz\u0105 mie\u0107 format daty (RRR-MM-DD).\")\n    if check_in &gt;= check_out:\n        raise ValueError(\"Data wymeldowania musi by\u0107 p\u00f3\u017aniejsza ni\u017c data zameldowania.\")\n\n    self.reservation_id: str = str(uuid.uuid4())\n    self.guest: Guest = guest\n    self.room: Room = room\n    self.check_in: date = check_in\n    self.check_out: date = check_out\n</code></pre>"},{"location":"reference/models/reservation/#models.reservation.Reservation.get_duration","title":"<code>get_duration()</code>","text":"<p>Oblicza i zwraca liczb\u0119 nocy w ramach danej rezerwacji, Returns:     int: r\u00f3\u017cnica mi\u0119dzy dat\u0105 zameldowania, a dat\u0105 wymeldowania, z kt\u00f3rej wyci\u0105gni\u0119to liczb\u0119 pe\u0142nych dni jako liczb\u0119 ca\u0142kowit\u0105.</p> Source code in <code>models/reservation.py</code> <pre><code>def get_duration(self) -&gt; int:\n    \"\"\"Oblicza i zwraca liczb\u0119 nocy w ramach danej rezerwacji,\n    Returns:\n        int: r\u00f3\u017cnica mi\u0119dzy dat\u0105 zameldowania, a dat\u0105 wymeldowania, z kt\u00f3rej wyci\u0105gni\u0119to liczb\u0119 pe\u0142nych dni jako liczb\u0119 ca\u0142kowit\u0105. \"\"\"\n    return (self.check_out - self.check_in).days\n</code></pre>"},{"location":"reference/models/reservation/#models.reservation.Reservation.get_summary","title":"<code>get_summary()</code>","text":"<p>Returns: Reservation_id \u2013 unikalny identyfikator rezerwacji Guest_name \u2013 metoda z klasy Guest, kt\u00f3ra zwraca imi\u0119 i nazwisko go\u015bcia Room_number \u2013 unikalny numer pokoju, atrybut klasy Room Check_in \u2013 data zameldowania w formacie ISO (RRR-MM-DD) Check_out - data wymeldowania w formacie ISO (RRR-MM-DD) Nights \u2013 liczba nocy obliczona za pomoc\u0105 get_duration() Total_price \u2013 ca\u0142kowity koszt pobytu w hotelu obliczony za pomoc\u0105 get_total_price()</p> Source code in <code>models/reservation.py</code> <pre><code>    def get_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Returns:\n            Reservation_id \u2013 unikalny identyfikator rezerwacji\n            Guest_name \u2013 metoda z klasy Guest, kt\u00f3ra zwraca imi\u0119 i nazwisko go\u015bcia\n            Room_number \u2013 unikalny numer pokoju, atrybut klasy Room\n            Check_in \u2013 data zameldowania w formacie ISO (RRR-MM-DD)\n            Check_out - data wymeldowania w formacie ISO (RRR-MM-DD)\n            Nights \u2013 liczba nocy obliczona za pomoc\u0105 get_duration()\n            Total_price \u2013 ca\u0142kowity koszt pobytu w hotelu obliczony za pomoc\u0105 get_total_price()\n\"\"\"\n        return {\n            \"reservation_id\": self.reservation_id,\n            \"guest_name\": self.guest.get_full_name(),\n            \"room_number\": self.room.number,\n            \"check_in\": self.check_in.isoformat(),\n            \"check_out\": self.check_out.isoformat(),\n            \"nights\": self.get_duration(),\n            \"total_price\": self.get_total_price(),\n        }\n</code></pre>"},{"location":"reference/models/reservation/#models.reservation.Reservation.get_total_price","title":"<code>get_total_price()</code>","text":"<p>Oblicza ca\u0142kowity koszt pobytu w hotelu Returns:     float: iloczyn w formie zmiennoprzecinkowej, obliczonej liczby nocy (get_duration) i ceny jednej nocy w danym pokoju (price_per_night) b\u0119d\u0105c\u0105 atrybutem klasy Room</p> Source code in <code>models/reservation.py</code> <pre><code>def get_total_price(self) -&gt; float:\n    \"\"\"Oblicza ca\u0142kowity koszt pobytu w hotelu\n    Returns:\n        float: iloczyn w formie zmiennoprzecinkowej, obliczonej liczby nocy (get_duration) i ceny jednej nocy w danym pokoju (price_per_night) b\u0119d\u0105c\u0105 atrybutem klasy Room\n     \"\"\"\n    return self.get_duration() * self.room.price_per_night\n</code></pre>"},{"location":"reference/models/reservation/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from models.reservation import Reservation\nfrom models.guest import Guest\nfrom models.room import Room\nfrom datetime import date\n\nguest = Guest(\"Anna\", \"Nowak\", \"anna.nowak@email.com\", \"123456789\")\nroom = Room(\"101\", \"double\", 200.0, 2)\ncheck_in = date(2025, 7, 23)\ncheck_out = date(2025, 7, 26)\n\nrezerwacja = Reservation(guest, room, check_in, check_out)\n\nprint(rezerwacja.get_duration())\nprint(rezerwacja.get_total_price())\nprint(rezerwacja.get_summary())\n</code></pre>"},{"location":"reference/models/room/","title":"Klasa <code>Room</code>","text":"<p>Klasa <code>Room</code> reprezentuje pok\u00f3j hotelowy dost\u0119pny do rezerwacji.</p> <p>Zawiera dane dotycz\u0105ce numeru pokoju, jego typu (np. single, double), ceny za noc oraz maksymalnej liczby go\u015bci. Mo\u017ce by\u0107 wykorzystywana przy tworzeniu rezerwacji i filtrowaniu dost\u0119pnych opcji noclegu.</p>"},{"location":"reference/models/room/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Reprezentuje pok\u00f3j hotelowy.</p> Atrybuty <p>number (str): Numer pokoju. room_type (str): Typ pokoju (np. single, double, suite). price_per_night (float): Cena za jedn\u0105 noc. capacity (int): Maksymalna liczba go\u015bci w pokoju.</p> <p>Inicjalizuje obiekt Room.</p> Source code in <code>models/room.py</code> <pre><code>def __init__(self, number: str, room_type: str, price_per_night: float, capacity: int):\n    \"\"\"Inicjalizuje obiekt Room.\"\"\"\n    if not number or not isinstance(number, str):\n        raise ValueError(\"Numer pokoju nie mo\u017ce by\u0107 pusty.\")\n    if not room_type or not isinstance(room_type, str):\n        raise ValueError(\"Typ pokoju nie mo\u017ce by\u0107 pusty.\")\n    if not isinstance(price_per_night, (int, float)) or price_per_night &lt;= 0:\n        raise ValueError(\"Cena za noc musi by\u0107 liczb\u0105 dodatni\u0105.\")\n    if not isinstance(capacity, int) or capacity &lt;= 0:\n        raise ValueError(\"Pojemno\u015b\u0107 pokoju musi by\u0107 liczb\u0105 ca\u0142kowit\u0105 wi\u0119ksz\u0105 od zera.\")\n\n    self.number: str = number\n    self.room_type: str = room_type\n    self.price_per_night: float = float(price_per_night)\n    self.capacity: int = capacity\n</code></pre>"},{"location":"reference/models/room/#models.room.Room.get_details","title":"<code>get_details()</code>","text":"<p>Zwraca szczeg\u00f3\u0142y pokoju.</p> Zwraca <p>Dict[str, Any]: S\u0142ownik z numerem, typem, cen\u0105 i pojemno\u015bci\u0105 pokoju.</p> Source code in <code>models/room.py</code> <pre><code>def get_details(self) -&gt; Dict[str, Any]:\n    \"\"\"Zwraca szczeg\u00f3\u0142y pokoju.\n\n    Zwraca:\n        Dict[str, Any]: S\u0142ownik z numerem, typem, cen\u0105 i pojemno\u015bci\u0105 pokoju.\n    \"\"\"\n    return {\n        \"numer\": self.number,\n        \"typ_pokoju\": self.room_type,\n        \"cena_za_noc\": self.price_per_night,\n        \"pojemnosc\": self.capacity,\n    }\n</code></pre>"},{"location":"reference/models/room/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from models.room import Room\n\npokoj = Room(\"101\", \"double\", 200.0, 2)\n\nprint(pokoj.number)      \nprint(pokoj.room_type)   \nprint(pokoj.price_per_night)\nprint(pokoj.capacity)\n</code></pre>"},{"location":"reference/services/hotel_service/","title":"Klasa <code>HotelService</code>","text":"<p>Klasa <code>HotelService</code> stanowi g\u0142\u00f3wn\u0105 logik\u0119 aplikacyjn\u0105 systemu zarz\u0105dzania hotelem. \u0141\u0105czy funkcje zwi\u0105zane z pokojami, go\u015b\u0107mi, rezerwacjami i p\u0142atno\u015bciami, zapewniaj\u0105c wygodny interfejs do operacji biznesowych.</p> <p>Umo\u017cliwia m.in. dodawanie pokoi, rejestracj\u0119 go\u015bci, tworzenie rezerwacji, przetwarzanie p\u0142atno\u015bci oraz sprawdzanie dost\u0119pno\u015bci.</p>"},{"location":"reference/services/hotel_service/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>Logika aplikacyjna zarz\u0105dzaj\u0105ca hotelem, rezerwacjami i p\u0142atno\u015bciami.</p> <p>Tworzy instancj\u0119 hotelu.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def __init__(self, name: str, address: str):\n    \"\"\"Tworzy instancj\u0119 hotelu.\"\"\"\n    self.hotel = Hotel(name, address)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.add_room","title":"<code>add_room(number, room_type, price_per_night, capacity)</code>","text":"<p>Dodaje pok\u00f3j do hotelu.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def add_room(self, number: str, room_type: str, price_per_night: float, capacity: int) -&gt; Room:\n    \"\"\"Dodaje pok\u00f3j do hotelu.\"\"\"\n    room = Room(number, room_type, price_per_night, capacity)\n    self.hotel.add_room(room)\n    return room\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.check_availability","title":"<code>check_availability(room_number, check_in, check_out)</code>","text":"<p>Sprawdza, czy dany pok\u00f3j jest dost\u0119pny w podanym terminie.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def check_availability(self, room_number: str, check_in: date, check_out: date) -&gt; bool:\n    \"\"\"Sprawdza, czy dany pok\u00f3j jest dost\u0119pny w podanym terminie.\"\"\"\n    room = self.hotel.find_room_by_number(room_number)\n    if not room:\n        raise ValueError(f\"Pok\u00f3j {room_number} nie istnieje.\")\n    return self.hotel.is_room_available(room, check_in, check_out)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.confirm_payment","title":"<code>confirm_payment(payment)</code>","text":"<p>Potwierdza p\u0142atno\u015b\u0107.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def confirm_payment(self, payment: Payment) -&gt; None:\n    \"\"\"Potwierdza p\u0142atno\u015b\u0107.\"\"\"\n    payment.confirm_payment()\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.create_payment","title":"<code>create_payment(reservation, method)</code>","text":"<p>Tworzy p\u0142atno\u015b\u0107 za rezerwacj\u0119.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def create_payment(self, reservation: Reservation, method: str) -&gt; Payment:\n    \"\"\"Tworzy p\u0142atno\u015b\u0107 za rezerwacj\u0119.\"\"\"\n    return Payment(reservation, method)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.get_all_reservations","title":"<code>get_all_reservations()</code>","text":"<p>Zwraca list\u0119 wszystkich rezerwacji w hotelu.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def get_all_reservations(self) -&gt; List[Reservation]:\n    \"\"\"Zwraca list\u0119 wszystkich rezerwacji w hotelu.\"\"\"\n    return self.hotel.get_all_reservations()\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.list_rooms","title":"<code>list_rooms(room_type=None, capacity=None)</code>","text":"<p>Zwraca dost\u0119pne pokoje, z mo\u017cliwo\u015bci\u0105 filtrowania.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def list_rooms(self, room_type: Optional[str] = None, capacity: Optional[int] = None) -&gt; List[Room]:\n    \"\"\"Zwraca dost\u0119pne pokoje, z mo\u017cliwo\u015bci\u0105 filtrowania.\"\"\"\n    return self.hotel.filter_rooms(room_type, capacity)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.make_reservation","title":"<code>make_reservation(guest, room_number, check_in, check_out)</code>","text":"<p>Tworzy rezerwacj\u0119, je\u015bli pok\u00f3j jest dost\u0119pny.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def make_reservation(\n    self, guest: Guest, room_number: str, check_in: date, check_out: date\n) -&gt; Reservation:\n    \"\"\"Tworzy rezerwacj\u0119, je\u015bli pok\u00f3j jest dost\u0119pny.\"\"\"\n    return self.hotel.make_reservation(guest, room_number, check_in, check_out)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.register_guest","title":"<code>register_guest(first_name, last_name, email, phone_number)</code>","text":"<p>Rejestruje nowego go\u015bcia.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def register_guest(self, first_name: str, last_name: str, email: str, phone_number: str) -&gt; Guest:\n    \"\"\"Rejestruje nowego go\u015bcia.\"\"\"\n    return Guest(first_name, last_name, email, phone_number)\n</code></pre>"},{"location":"reference/services/hotel_service/#services.hotel_service.HotelService.simulate_full_booking_flow","title":"<code>simulate_full_booking_flow()</code>","text":"<p>Symuluje pe\u0142ny proces rezerwacji i p\u0142atno\u015bci \u2013 do test\u00f3w integracyjnych.</p> Source code in <code>services/hotel_service.py</code> <pre><code>def simulate_full_booking_flow(self) -&gt; Dict[str, Any]:\n    \"\"\"Symuluje pe\u0142ny proces rezerwacji i p\u0142atno\u015bci \u2013 do test\u00f3w integracyjnych.\"\"\"\n    # Dodanie pokoi\n    room1 = self.add_room(\"101\", \"double\", 320.0, 2)\n    room2 = self.add_room(\"102\", \"single\", 200.0, 1)\n\n    # Rejestracja go\u015bcia\n    guest = self.register_guest(\"Jan\", \"Nowak\", \"jan.nowak@example.com\", \"123456789\")\n\n    # Tworzenie rezerwacji\n    check_in = date(2025, 7, 10)\n    check_out = date(2025, 7, 13)\n    reservation = self.make_reservation(guest, \"101\", check_in, check_out)\n\n    # Tworzenie i potwierdzenie p\u0142atno\u015bci\n    payment = self.create_payment(reservation, \"karta\")\n    self.confirm_payment(payment)\n\n    return {\n        \"guest\": guest,\n        \"room\": room1,\n        \"reservation\": reservation,\n        \"payment\": payment\n    }\n</code></pre>"},{"location":"reference/services/hotel_service/#przykad-uzycia","title":"Przyk\u0142ad u\u017cycia","text":"<pre><code>from services.hotel_service import HotelService\nfrom datetime import date\n\n# Tworzenie hotelu\nservice = HotelService(\"Hotel Warszawa\", \"ul. Przyk\u0142adowa 1\")\n\n# Dodanie pokoju\nroom = service.add_room(\"101\", \"double\", 300.0, 2)\n\n# Rejestracja go\u015bcia\nguest = service.register_guest(\"Anna\", \"Kowalska\", \"anna@example.com\", \"555-123-456\")\n\n# Tworzenie rezerwacji\ncheck_in = date(2025, 8, 1)\ncheck_out = date(2025, 8, 5)\nreservation = service.make_reservation(guest, \"101\", check_in, check_out)\n\n# P\u0142atno\u015b\u0107\npayment = service.create_payment(reservation, \"przelew\")\nservice.confirm_payment(payment)\n</code></pre>"},{"location":"reference/tests/index_test/","title":"Przegl\u0105d test\u00f3w","text":"<p>W projekcie zastosowano zar\u00f3wno testy jednostkowe, jak i integracyjne w celu zapewnienia poprawno\u015bci dzia\u0142ania aplikacji.</p> <p>Testy zosta\u0142y podzielone na dwa g\u0142\u00f3wne typy:</p> <ul> <li>Testy jednostkowe \u2014 sprawdzaj\u0105 poprawno\u015b\u0107 dzia\u0142ania pojedynczych klas, ich metod oraz walidacj\u0119 danych wej\u015bciowych.</li> <li>Testy integracyjne \u2014 weryfikuj\u0105 pe\u0142ne scenariusze u\u017cycia programu: od rejestracji go\u015bcia, przez tworzenie rezerwacji i obs\u0142ug\u0119 p\u0142atno\u015bci, a\u017c po eksport danych.</li> </ul>"},{"location":"reference/tests/index_test/#testy-jednostkowe-pojedyncze-klasy","title":"Testy jednostkowe (pojedyncze klasy)","text":"<ul> <li>Guest \u2014 testy poprawno\u015bci danych go\u015bcia oraz metod informacyjnych</li> <li>Room \u2014 testy poprawno\u015bci pokoju, walidacji oraz reprezentacji tekstowej</li> <li>Hotel \u2014 testy zarz\u0105dzania pokojami i rezerwacjami</li> <li>Payment \u2014 testy metod p\u0142atno\u015bci, status\u00f3w oraz podsumowa\u0144</li> <li>Reservation \u2014 testy rezerwacji, zakresu dat oraz oblicze\u0144</li> </ul>"},{"location":"reference/tests/index_test/#testy-integracyjne-dziaanie-programu","title":"Testy integracyjne (dzia\u0142anie programu)","text":"<ul> <li>Rezerwacja i p\u0142atno\u015b\u0107 \u2014 pe\u0142ny przebieg od dodania pokoju do potwierdzenia p\u0142atno\u015bci</li> <li>Anulowanie i zwrot \u2014 scenariusz anulowania rezerwacji i zwrotu \u015brodk\u00f3w</li> <li>Dost\u0119pno\u015b\u0107 i eksport \u2014 test filtrowania dost\u0119pnych pokoi oraz eksportu danych do pliku</li> </ul>"},{"location":"reference/tests/integration/test_integracyjny_anulowanie_zwrot/","title":"Test <code>TestIntegracyjnyAnulowanie</code>","text":"<p>Test integracyjny weryfikuj\u0105cy pe\u0142en przebieg obs\u0142ugi rezerwacji w hotelu: - dodanie pokoju,  - rejestracja go\u015bcia,  - utworzenie rezerwacji,  - potwierdzenie p\u0142atno\u015bci,  - anulowanie rezerwacji, - zwrot \u015brodk\u00f3w.</p> <p>Test symuluje dane wej\u015bciowe za pomoc\u0105 <code>unittest.mock.patch</code> imituj\u0105c interakcj\u0119 u\u017cytkownika z interfejsem CLI.</p>"},{"location":"reference/tests/integration/test_integracyjny_anulowanie_zwrot/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Test integracyjny sprawdzaj\u0105cy pe\u0142ny proces: dodanie pokoju, rejestracja go\u015bcia, dokonanie rezerwacji, op\u0142acenie jej, anulowanie rezerwacji oraz zwrot p\u0142atno\u015bci.</p>"},{"location":"reference/tests/integration/test_integracyjny_anulowanie_zwrot/#tests.integration.test_integracyjny_anulowanie_zwrot.TestIntegracyjnyAnulowanie.test_anulowanie_i_zwrot","title":"<code>test_anulowanie_i_zwrot(mock_input)</code>","text":"<p>Test przebiega przez nast\u0119puj\u0105ce kroki: dodanie pokoju do hotelu, rejestracja nowego go\u015bcia, utworzenie rezerwacji dla go\u015bcia, potwierdzenie p\u0142atno\u015bci, anulowanie rezerwacji, zwrot \u015brodk\u00f3w.</p> <p>Ka\u017cdy etap wykorzystuje symulacj\u0119 danych wej\u015bciowych, a po wykonaniu operacji nast\u0119puje weryfikacja, czy system zareagowa\u0142 zgodnie z oczekiwanym przebiegiem logiki biznesowej.</p> Source code in <code>tests/integration/test_integracyjny_anulowanie_zwrot.py</code> <pre><code>@patch('builtins.input')\ndef test_anulowanie_i_zwrot(self, mock_input):\n    \"\"\"Test przebiega przez nast\u0119puj\u0105ce kroki:\n    dodanie pokoju do hotelu,\n    rejestracja nowego go\u015bcia,\n    utworzenie rezerwacji dla go\u015bcia,\n    potwierdzenie p\u0142atno\u015bci,\n    anulowanie rezerwacji,\n    zwrot \u015brodk\u00f3w.\n\n    Ka\u017cdy etap wykorzystuje symulacj\u0119 danych wej\u015bciowych, a po wykonaniu operacji nast\u0119puje weryfikacja,\n    czy system zareagowa\u0142 zgodnie z oczekiwanym przebiegiem logiki biznesowej.\n    \"\"\"\n\n    dzisiaj = date.today()\n    jutro = dzisiaj + timedelta(days=1)\n\n    dane_testowe = [\n        \"100\",\n        \"single\",\n        \"200\",\n        \"1\",\n        \"Jan\",\n        \"Kowalski\",\n        \"jankowalski@email.com\",\n        \"123456789\"\n    ]\n\n    mock_input.side_effect = dane_testowe\n    add_room()\n    register_guest()\n\n    gosc_id = list(guests.keys())[0]\n\n    mock_input.side_effect = [\n        gosc_id,\n        dzisiaj.strftime(\"%Y-%m-%d\"),\n        jutro.strftime(\"%Y-%m-%d\"),\n        \"100\",\n        \"karta\"\n    ]\n    make_reservation()\n\n    platnosc = list(payments.values())[0]\n    mock_input.side_effect = [platnosc.payment_id]\n    confirm_payment()\n\n    rezerwacja_id = hotel.get_all_reservations()[0].reservation_id\n    mock_input.side_effect = [rezerwacja_id]\n    cancel_reservation()\n\n    platnosc = list(payments.values())[0]\n    mock_input.side_effect = [platnosc.payment_id]\n    refund_payment()\n</code></pre>"},{"location":"reference/tests/integration/test_integracyjny_dostepnosc_eksport/","title":"Test <code>TestIntegracyjnyDostepnoscEksport</code>","text":"<p>Test integracyjny sprawdzaj\u0105cy pe\u0142ny przebieg procesu rezerwacyjnego: od dodania pokoju i rejestracji go\u015bcia, przez dokonanie i op\u0142acenie rezerwacji, a\u017c po sprawdzenie historii p\u0142atno\u015bci, dost\u0119pno\u015bci pokoi i eksport danych do pliku CSV.</p> <p>Weryfikowane s\u0105 nast\u0119puj\u0105ce funkcjonalno\u015bci: - dodanie pokoju do hotelu, - rejestracja go\u015bcia, - dokonanie i op\u0142acenie rezerwacji, - przypisanie go\u015bcia do pokoju w danym terminie, - sprawdzenie historii rezerwacji i p\u0142atno\u015bci, - eksport danych do pliku <code>.csv</code>, - filtrowanie dost\u0119pnych pokoi.</p>"},{"location":"reference/tests/integration/test_integracyjny_dostepnosc_eksport/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Test integracyjny sprawdzaj\u0105cy pe\u0142ny przebieg rezerwacji: od dodania pokoju i rejestracji go\u015bcia, przez dokonanie i op\u0142acenie rezerwacji, a\u017c po sprawdzenie dost\u0119pno\u015bci pokoi, historii p\u0142atno\u015bci oraz eksport danych do pliku CSV.</p>"},{"location":"reference/tests/integration/test_integracyjny_dostepnosc_eksport/#tests.integration.test_integracyjny_dostepnosc_eksport.TestIntegracyjnyDostepnoscEksport.test_dostepnosc_eksport","title":"<code>test_dostepnosc_eksport(mock_input)</code>","text":"<p>Test obejmuje: dodanie pokoju i go\u015bcia, rezerwacj\u0119 i potwierdzenie p\u0142atno\u015bci, sprawdzenie w jakim pokoju przebywa go\u015b\u0107, podgl\u0105d rezerwacji pokoju i p\u0142atno\u015bci, eksport danych do pliku .csv, sprawdzenie dost\u0119pnych pokoi w zadanym przedziale.</p> Source code in <code>tests/integration/test_integracyjny_dostepnosc_eksport.py</code> <pre><code>@patch('builtins.input')\ndef test_dostepnosc_eksport(self, mock_input):\n    \"\"\" Test obejmuje:\n            dodanie pokoju i go\u015bcia,\n            rezerwacj\u0119 i potwierdzenie p\u0142atno\u015bci,\n            sprawdzenie w jakim pokoju przebywa go\u015b\u0107,\n            podgl\u0105d rezerwacji pokoju i p\u0142atno\u015bci,\n            eksport danych do pliku .csv,\n            sprawdzenie dost\u0119pnych pokoi w zadanym przedziale. \"\"\"\n\n    dzisiaj = date.today()\n    jutro = dzisiaj + timedelta(days=1)\n\n    dane_do_testu = [\n        \"100\",\n        \"single\",\n        \"200\",\n        \"1\",\n        \"Jan\",\n        \"Kowalski\",\n        \"jankowalski@email.com\",\n        \"123456789\"\n    ]\n\n    mock_input.side_effect = dane_do_testu\n    add_room()\n    register_guest()\n\n    gosc_id = list(guest_reservations.keys())[0]\n\n\n    mock_input.side_effect = [gosc_id, dzisiaj.strftime(\"%Y-%m-%d\"),\n                              jutro.strftime(\"%Y-%m-%d\"), \"100\", \"karta\"]\n    make_reservation()\n\n    platnosc = list(payments.values())[0]\n    mock_input.side_effect = [platnosc.payment_id]\n    confirm_payment()\n\n    mock_input.side_effect = [gosc_id, dzisiaj.strftime(\"%Y-%m-%d\")]\n    check_guest_room()\n\n\n    mock_input.side_effect = [\"100\"]\n    show_room_reservations()\n\n    mock_input.side_effect = [gosc_id]\n    show_guest_payments()\n\n    export_reservations_to_csv()\n    self.assertTrue(os.path.exists(\"rezerwacje_export.csv\"))\n    print(\"Plik CSV zosta\u0142 wygenerowany.\")\n\n    mock_input.side_effect = [\n        dzisiaj.strftime(\"%Y-%m-%d\"),\n        jutro.strftime(\"%Y-%m-%d\")\n    ]\n    show_available_rooms()\n</code></pre>"},{"location":"reference/tests/integration/test_integracyjny_rezerwacja_platnosc/","title":"Test <code>TestIntegracyjnyRezerwacja</code>","text":"<p>Test integracyjny sprawdzaj\u0105cy poprawno\u015b\u0107 procesu rezerwacji oraz p\u0142atno\u015bci. Obejmuje pe\u0142ny przebieg: od dodania pokoju, przez rejestracj\u0119 go\u015bcia, a\u017c po stworzenie rezerwacji i potwierdzenie p\u0142atno\u015bci.</p> <p>Weryfikowane s\u0105: - poprawne dodanie pokoju do systemu, - rejestracja go\u015bcia i zapisanie jego danych, - przypisanie rezerwacji do go\u015bcia i pokoju w okre\u015blonym terminie, - utworzenie obiektu p\u0142atno\u015bci oraz zmiana jej statusu po potwierdzeniu.</p>"},{"location":"reference/tests/integration/test_integracyjny_rezerwacja_platnosc/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Test integracyjny sprawdzaj\u0105cy proces rezerwacji oraz p\u0142atno\u015bci: dodanie pokoju, rejestracja go\u015bcia, dokonanie rezerwacji oraz potwierdzenie p\u0142atno\u015bci.</p>"},{"location":"reference/tests/integration/test_integracyjny_rezerwacja_platnosc/#tests.integration.test_integracyjny_rezerwacja_platnosc.TestIntegracyjnyRezerwacja.test_rezerwacja_i_platnosc","title":"<code>test_rezerwacja_i_platnosc(mock_input)</code>","text":"<p>Test obejmuje: dodanie pokoju i weryfikacj\u0119 jego obecno\u015bci w systemie, rejestracj\u0119 go\u015bcia, dokonanie rezerwacji z przypisan\u0105 p\u0142atno\u015bci\u0105, potwierdzenie p\u0142atno\u015bci i zmian\u0119 jej statusu.</p> Source code in <code>tests/integration/test_integracyjny_rezerwacja_platnosc.py</code> <pre><code>@patch('builtins.input')\ndef test_rezerwacja_i_platnosc(self, mock_input):\n    \"\"\" Test obejmuje:\n            dodanie pokoju i weryfikacj\u0119 jego obecno\u015bci w systemie,\n            rejestracj\u0119 go\u015bcia,\n            dokonanie rezerwacji z przypisan\u0105 p\u0142atno\u015bci\u0105,\n            potwierdzenie p\u0142atno\u015bci i zmian\u0119 jej statusu. \"\"\"\n\n    dzisiaj = date.today()\n    jutro = dzisiaj + timedelta(days=1)\n\n    dane_wejsciowe = [\n        \"100\",\n        \"single\",\n        \"200\",\n        \"1\",\n        \"Jan\",\n        \"Kowalski\",\n        \"jankowalski@email.com\",\n        \"123456789\"\n    ]\n\n    mock_input.side_effect = dane_wejsciowe\n    add_room()\n    self.assertEqual(len(hotel.get_all_rooms()), 1)\n\n    register_guest()\n    self.assertEqual(len(guests), 1)\n\n    lista_gosci = list(guests.keys())\n    gosc_id = lista_gosci[0]\n\n    mock_input.side_effect = [\n        gosc_id,\n        dzisiaj.strftime(\"%Y-%m-%d\"),\n        jutro.strftime(\"%Y-%m-%d\"),\n        \"100\",\n        \"karta\"\n    ]\n\n    make_reservation()\n    self.assertEqual(len(hotel.get_all_reservations()), 1)\n\n    self.assertEqual(len(payments), 1)\n    lista_platnosci = list(payments.values())\n    platnosc = lista_platnosci[0]\n    self.assertFalse(platnosc.paid)\n\n    mock_input.side_effect = [platnosc.payment_id]\n    confirm_payment()\n    self.assertTrue(platnosc.paid)\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/","title":"Test <code>GuestTest</code>","text":"<p>Test jednostkowy dla klasy <code>Guest</code>, weryfikuj\u0105cy poprawno\u015b\u0107 tworzenia obiekt\u00f3w oraz dzia\u0142ania metod publicznych klasy.</p> <p>Sprawdzane s\u0105 nast\u0119puj\u0105ce aspekty: - poprawna inicjalizacja danych go\u015bcia (imi\u0119, nazwisko, e-mail, numer telefonu), - unikalno\u015b\u0107 identyfikatora go\u015bcia (<code>guest_id</code>), - dzia\u0142anie metod <code>get_full_name()</code> oraz <code>get_contact_info()</code>, - reprezentacje tekstowe: <code>__str__()</code> i <code>__repr__()</code>, - obs\u0142uga b\u0142\u0119d\u00f3w przy nieprawid\u0142owych danych wej\u015bciowych (brak imienia/nazwiska, b\u0142\u0119dny e-mail, numer telefonu w z\u0142ym formacie lub pusty).</p>"},{"location":"reference/tests/unit/Test_guest_class/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Test dla klasy Guest - weryfikuje poprawno\u015b\u0107 tworzenia danych o go\u015bciu oraz dzia\u0142ania metod klasy.</p>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_create_guest","title":"<code>test_create_guest()</code>","text":"<p>Test poprawno\u015bci utworzenia obiektu go\u015bcia sk\u0142adaj\u0105cego si\u0119 z takich danych jak: imi\u0119, nazwisko, adres e-mail, numer telefonu. Weryfikacja poprawno\u015bci zapisania danych oraz nadania unikalnego ID.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_create_guest(self):\n    \"\"\" Test poprawno\u015bci utworzenia obiektu go\u015bcia sk\u0142adaj\u0105cego si\u0119 z takich danych jak:\n     imi\u0119, nazwisko, adres e-mail, numer telefonu. Weryfikacja poprawno\u015bci zapisania danych oraz nadania unikalnego ID. \"\"\"\n    guest = Guest(\"Jan\", \"Kowalski\", \"jankowalski@email.com\", \"91123456789\")\n    self.assertIsInstance(guest.guest_id, str)\n    self.assertEqual(guest.first_name, \"Jan\")\n    self.assertEqual(guest.last_name, \"Kowalski\")\n    self.assertEqual(guest.email, \"jankowalski@email.com\")\n    self.assertEqual(guest.phone_number, \"91123456789\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_empty_first_name","title":"<code>test_empty_first_name()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podane imi\u0119 go\u015bcia.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_empty_first_name(self):\n    \"\"\" Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podane imi\u0119 go\u015bcia.\"\"\"\n    with self.assertRaises(ValueError):\n        Guest(\"\", \"Nowakowski\", \"kazimierz@email.com\", \"443809091\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_empty_last_name","title":"<code>test_empty_last_name()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podane nazwisko go\u015bcia.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_empty_last_name(self):\n    \"\"\" Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podane nazwisko go\u015bcia.\"\"\"\n    with self.assertRaises(ValueError):\n        Guest(\"Adam\", \"\", \"adamnowak@email.com\", \"123456789\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_empty_phone_number","title":"<code>test_empty_phone_number()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podany numer telefonu.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_empty_phone_number(self):\n    \"\"\"Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy nie zostanie podany numer telefonu.\"\"\"\n    with self.assertRaises(ValueError):\n        Guest(\"Joanna\", \"Niewiadomska\", \"joanna@email.com\", \"\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_get_contact_info","title":"<code>test_get_contact_info()</code>","text":"<p>Test dzia\u0142ania metody get_contact_info - czy zwraca dane dotycz\u0105ce adresu e-mail oraz numeru telefonu go\u015bcia w formie s\u0142ownika.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_get_contact_info(self):\n    \"\"\" Test dzia\u0142ania metody get_contact_info - czy zwraca dane dotycz\u0105ce adresu e-mail oraz numeru telefonu go\u015bcia\n    w formie s\u0142ownika.\"\"\"\n    guest= Guest(\"Anna\", \"Kowalska\", \"annakowalska@email.com\", \"543871091\")\n    contact = guest.get_contact_info()\n    self.assertEqual(contact[\"email\"], \"annakowalska@email.com\")\n    self.assertEqual(contact[\"phone_number\"], \"543871091\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_get_full_name","title":"<code>test_get_full_name()</code>","text":"<p>Test dzia\u0142ania metody get_full_name - czy zwraca pe\u0142ne imi\u0119 i nazwisko go\u015bcia.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_get_full_name(self):\n    \"\"\" Test dzia\u0142ania metody get_full_name - czy zwraca pe\u0142ne imi\u0119 i nazwisko go\u015bcia.\"\"\"\n    guest = Guest(\"Adam\", \"Nowak\", \"adamnowak@email.com\", \"123456789\")\n    self.assertEqual(guest.get_full_name(), \"Adam Nowak\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_invalid_email","title":"<code>test_invalid_email()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy podany adres e-mail nie posiada poprawnego formatu adresu mailowego.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_invalid_email(self):\n    \"\"\" Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy podany adres e-mail nie posiada poprawnego formatu adresu\n    mailowego. \"\"\"\n    with self.assertRaises(ValueError):\n        Guest(\"Anna\", \"Kowalska\", \"nomail\", \"543871091\")\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_phone_number_not_string","title":"<code>test_phone_number_not_string()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy numer telefonu nie zostanie podany w formie tekstowej (string).</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_phone_number_not_string(self):\n    \"\"\"Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy numer telefonu nie zostanie podany w formie tekstowej (string).\"\"\"\n    with self.assertRaises(ValueError):\n        Guest(\"Jan\", \"Kowalski\", \"jankowalski@email.com\", 123456789)\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_repr","title":"<code>test_repr()</code>","text":"<p>Weryfikacja czy techniczny opis obiektu zawiera po\u017c\u0105dane informacje o go\u015bciu hotelu.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_repr(self):\n    \"\"\" Weryfikacja czy techniczny opis obiektu zawiera po\u017c\u0105dane informacje o go\u015bciu hotelu.\"\"\"\n    guest = Guest(\"Joanna\", \"Niewiadomska\", \"joanna@email.com\", \"777871091\")\n    rep = repr(guest)\n    self.assertIn(\"Go\u015b\u0107(ID=\", rep)\n    self.assertIn(\"imi\u0119='Joanna'\", rep)\n    self.assertIn(\"nazwisko='Niewiadomska'\", rep)\n</code></pre>"},{"location":"reference/tests/unit/Test_guest_class/#tests.unit.Test_guest_class.GuestTest.test_str_representation","title":"<code>test_str_representation()</code>","text":"<p>Weryfikacja czy po wy\u015bwietleniu go\u015bcia wida\u0107 jego imi\u0119 i nazwisko.</p> Source code in <code>tests/unit/Test_guest_class.py</code> <pre><code>def test_str_representation(self):\n    \"\"\" Weryfikacja czy po wy\u015bwietleniu go\u015bcia wida\u0107 jego imi\u0119 i nazwisko. \"\"\"\n    guest = Guest(\"Kazimierz\", \"Nowakowski\", \"kazimierz@email.com\", \"443809091\")\n    self.assertIn(\"Go\u015b\u0107: Kazimierz Nowakowski\", str(guest))\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/","title":"Test <code>TestHotel</code>","text":"<p>Test jednostkowy dla klasy <code>Hotel</code>, sprawdzaj\u0105cy jej kluczowe funkcjonalno\u015bci zwi\u0105zane z zarz\u0105dzaniem pokojami i rezerwacjami.</p> <p>Zakres test\u00f3w obejmuje: - dodawanie pokoi i zapobieganie duplikatom, - filtrowanie pokoi po typie i pojemno\u015bci, - wyszukiwanie pokoi po numerze, - tworzenie rezerwacji w dost\u0119pnych terminach, - obs\u0142ug\u0119 konfliktu termin\u00f3w rezerwacji, - weryfikacj\u0119 dost\u0119pno\u015bci pokoju na zadany przedzia\u0142 czasu.</p> <p>Testy operuj\u0105 na instancji hotelu z dwoma pokojami oraz jednym go\u015bciem utworzonym w metodzie <code>setUp()</code>.</p>"},{"location":"reference/tests/unit/test_hotel/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Testy jednostkowe dla klasy Hotel - sprawdzaj\u0105 poprawno\u015b\u0107 dodawania pokoi, filtrowania ich, dokonywania rezerwacji oraz weryfikacji dost\u0119pno\u015bci.</p>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.setUp","title":"<code>setUp()</code>","text":"<p>Tworzy obiekt hotelu z dwoma pokojami i jednym go\u015bciem do wykorzystania w testach.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def setUp(self):\n    \"\"\"Tworzy obiekt hotelu z dwoma pokojami i jednym go\u015bciem do wykorzystania w testach.\"\"\"\n    self.hotel = Hotel(\"Hotel Testowy\", \"ul. Przyk\u0142adowa 1\")\n    self.room1 = Room(\"101\", \"single\", 150.0, 1)\n    self.room2 = Room(\"102\", \"double\", 200.0, 2)\n    self.hotel.add_room(self.room1)\n    self.hotel.add_room(self.room2)\n    self.guest = Guest(\"Jan\", \"Kowalski\", \"jan@example.com\", \"123456789\")\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_add_room_duplicate","title":"<code>test_add_room_duplicate()</code>","text":"<p>Test sprawdzaj\u0105cy, czy ponowna pr\u00f3ba dodania tego samego pokoju powoduje b\u0142\u0105d ValueError.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_add_room_duplicate(self):\n    \"\"\"Test sprawdzaj\u0105cy, czy ponowna pr\u00f3ba dodania tego samego pokoju powoduje b\u0142\u0105d ValueError.\"\"\"\n    with self.assertRaises(ValueError):\n        self.hotel.add_room(self.room1)\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_filter_rooms_by_capacity","title":"<code>test_filter_rooms_by_capacity()</code>","text":"<p>Test filtrowania pokoi po maksymalnej pojemno\u015bci (ilo\u015bci go\u015bci).</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_filter_rooms_by_capacity(self):\n    \"\"\"Test filtrowania pokoi po maksymalnej pojemno\u015bci (ilo\u015bci go\u015bci).\"\"\"\n    result = self.hotel.filter_rooms(capacity=2)\n    self.assertEqual(result, [self.room2])\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_filter_rooms_by_type","title":"<code>test_filter_rooms_by_type()</code>","text":"<p>Test filtrowania pokoi po typie (np. single, double).</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_filter_rooms_by_type(self):\n    \"\"\"Test filtrowania pokoi po typie (np. single, double).\"\"\"\n    result = self.hotel.filter_rooms(room_type=\"double\")\n    self.assertEqual(result, [self.room2])\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_find_room_by_number","title":"<code>test_find_room_by_number()</code>","text":"<p>Test sprawdzaj\u0105cy poprawno\u015b\u0107 wyszukiwania pokoju po numerze.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_find_room_by_number(self):\n    \"\"\"Test sprawdzaj\u0105cy poprawno\u015b\u0107 wyszukiwania pokoju po numerze.\"\"\"\n    found = self.hotel.find_room_by_number(\"101\")\n    self.assertEqual(found, self.room1)\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_get_all_rooms","title":"<code>test_get_all_rooms()</code>","text":"<p>Test sprawdzaj\u0105cy, czy hotel zwraca wszystkie dodane pokoje.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_get_all_rooms(self):\n    \"\"\"Test sprawdzaj\u0105cy, czy hotel zwraca wszystkie dodane pokoje.\"\"\"\n    self.assertEqual(len(self.hotel.get_all_rooms()), 2)\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_is_room_available_false","title":"<code>test_is_room_available_false()</code>","text":"<p>Test sprawdzaj\u0105cy, czy pok\u00f3j zostaje oznaczony jako niedost\u0119pny przy konflikcie rezerwacji.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_is_room_available_false(self):\n    \"\"\"Test sprawdzaj\u0105cy, czy pok\u00f3j zostaje oznaczony jako niedost\u0119pny przy konflikcie rezerwacji.\"\"\"\n    self.hotel.make_reservation(self.guest, \"101\", date(2025, 6, 20), date(2025, 6, 22))\n    available = self.hotel.is_room_available(self.room1, date(2025, 6, 21), date(2025, 6, 23))\n    self.assertFalse(available)\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_is_room_available_true","title":"<code>test_is_room_available_true()</code>","text":"<p>Test sprawdzaj\u0105cy, czy pok\u00f3j jest dost\u0119pny w przypadku braku konfliktu termin\u00f3w.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_is_room_available_true(self):\n    \"\"\"Test sprawdzaj\u0105cy, czy pok\u00f3j jest dost\u0119pny w przypadku braku konfliktu termin\u00f3w.\"\"\"\n    available = self.hotel.is_room_available(self.room1, date(2025, 7, 1), date(2025, 7, 5))\n    self.assertTrue(available)\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_make_reservation_conflict","title":"<code>test_make_reservation_conflict()</code>","text":"<p>Test weryfikuj\u0105cy czy pr\u00f3ba rezerwacji pokoju na ju\u017c zaj\u0119ty termin zwr\u00f3ci b\u0142\u0105d ValueError.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_make_reservation_conflict(self):\n    \"\"\"Test weryfikuj\u0105cy czy pr\u00f3ba rezerwacji pokoju na ju\u017c zaj\u0119ty termin zwr\u00f3ci b\u0142\u0105d ValueError.\"\"\"\n    check_in = date(2025, 6, 20)\n    check_out = date(2025, 6, 22)\n    self.hotel.make_reservation(self.guest, \"101\", check_in, check_out)\n    with self.assertRaises(ValueError):\n        self.hotel.make_reservation(self.guest, \"101\", date(2025, 6, 21), date(2025, 6, 23))\n</code></pre>"},{"location":"reference/tests/unit/test_hotel/#tests.unit.test_hotel.TestHotel.test_make_reservation_successful","title":"<code>test_make_reservation_successful()</code>","text":"<p>Test sprawdzaj\u0105cy poprawno\u015b\u0107 tworzenia nowej rezerwacji.</p> Source code in <code>tests/unit/test_hotel.py</code> <pre><code>def test_make_reservation_successful(self):\n    \"\"\"Test sprawdzaj\u0105cy poprawno\u015b\u0107 tworzenia nowej rezerwacji.\"\"\"\n    check_in = date(2025, 6, 20)\n    check_out = date(2025, 6, 22)\n    reservation = self.hotel.make_reservation(self.guest, \"101\", check_in, check_out)\n    self.assertIsInstance(reservation, Reservation)\n    self.assertEqual(len(self.hotel.get_all_reservations()), 1)\n</code></pre>"},{"location":"reference/tests/unit/test_payment/","title":"Test <code>TestPayment</code>","text":"<p>Test jednostkowy dla klasy <code>Payment</code>, sprawdzaj\u0105cy poprawno\u015b\u0107 tworzenia p\u0142atno\u015bci oraz dzia\u0142ania jej metod.</p> <p>Zakres test\u00f3w obejmuje: - tworzenie p\u0142atno\u015bci z r\u00f3\u017cnymi metodami (karta/got\u00f3wka), - walidacj\u0119 poprawno\u015bci danych wej\u015bciowych (rezerwacja, metoda p\u0142atno\u015bci), - potwierdzanie p\u0142atno\u015bci i aktualizacj\u0119 jej statusu, - obs\u0142ug\u0119 ponownego potwierdzania tej samej p\u0142atno\u015bci, - metody informacyjne: <code>is_paid()</code>, <code>get_summary()</code>, <code>__str__()</code> i <code>__repr__()</code>, - obs\u0142ug\u0119 r\u00f3\u017cnych kwot wynikaj\u0105cych z rezerwacji (liczba nocy \u00d7 cena pokoju).</p> <p>Testy wykonuj\u0105 r\u00f3wnie\u017c weryfikacj\u0119 typu danych oraz warto\u015bci zwracanych przez metody klasy.</p>"},{"location":"reference/tests/unit/test_payment/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Test dla klasy Payment - weryfikuje poprawno\u015b\u0107 tworzenia p\u0142atno\u015bci oraz dzia\u0142ania metod klasy.</p>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.setUp","title":"<code>setUp()</code>","text":"<p>Przygotowanie danych testowych - utworzenie go\u015bcia, pokoju i rezerwacji.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def setUp(self):\n    \"\"\"Przygotowanie danych testowych - utworzenie go\u015bcia, pokoju i rezerwacji.\"\"\"\n    self.guest = Guest(\"Jan\", \"Kowalski\", \"jan@email.com\", \"123456789\")\n    self.room = Room(\"101\", \"single\", 200.0, 1)\n    self.reservation = Reservation(self.guest, self.room, date(2025, 7, 1), date(2025, 7, 3))\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_confirm_payment","title":"<code>test_confirm_payment()</code>","text":"<p>Test dzia\u0142ania metody confirm_payment - czy oznacza p\u0142atno\u015b\u0107 jako zap\u0142acon\u0105.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_confirm_payment(self):\n    \"\"\"Test dzia\u0142ania metody confirm_payment - czy oznacza p\u0142atno\u015b\u0107 jako zap\u0142acon\u0105.\"\"\"\n    payment = Payment(self.reservation, \"karta\")\n\n    # Przed potwierdzeniem\n    self.assertFalse(payment.paid)\n    self.assertIsNone(payment.payment_date)\n\n    # Potwierdzenie\n    payment.confirm_payment()\n\n    # Po potwierdzeniu\n    self.assertTrue(payment.paid)\n    self.assertIsInstance(payment.payment_date, datetime)\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_confirm_payment_twice","title":"<code>test_confirm_payment_twice()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError przy pr\u00f3bie ponownego potwierdzenia p\u0142atno\u015bci.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_confirm_payment_twice(self):\n    \"\"\"Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError przy pr\u00f3bie ponownego potwierdzenia p\u0142atno\u015bci.\"\"\"\n    payment = Payment(self.reservation, \"got\u00f3wka\")\n    payment.confirm_payment()\n\n    with self.assertRaises(ValueError):\n        payment.confirm_payment()\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_create_payment_card","title":"<code>test_create_payment_card()</code>","text":"<p>Test poprawno\u015bci utworzenia p\u0142atno\u015bci kart\u0105.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_create_payment_card(self):\n    \"\"\"Test poprawno\u015bci utworzenia p\u0142atno\u015bci kart\u0105.\"\"\"\n    payment = Payment(self.reservation, \"karta\")\n\n    self.assertIsInstance(payment.payment_id, str)\n    self.assertEqual(payment.method, \"karta\")\n    self.assertEqual(payment.amount, 400.0)  # 2 noce \u00d7 200 z\u0142\n    self.assertFalse(payment.paid)\n    self.assertIsNone(payment.payment_date)\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_create_payment_cash","title":"<code>test_create_payment_cash()</code>","text":"<p>Test poprawno\u015bci utworzenia p\u0142atno\u015bci got\u00f3wk\u0105.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_create_payment_cash(self):\n    \"\"\"Test poprawno\u015bci utworzenia p\u0142atno\u015bci got\u00f3wk\u0105.\"\"\"\n    payment = Payment(self.reservation, \"got\u00f3wka\")\n\n    self.assertEqual(payment.method, \"got\u00f3wka\")\n    self.assertEqual(payment.amount, 400.0)\n    self.assertFalse(payment.paid)\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_different_reservation_amounts","title":"<code>test_different_reservation_amounts()</code>","text":"<p>Test czy payment poprawnie pobiera kwot\u0119 z r\u00f3\u017cnych rezerwacji.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_different_reservation_amounts(self):\n    \"\"\"Test czy payment poprawnie pobiera kwot\u0119 z r\u00f3\u017cnych rezerwacji.\"\"\"\n    # D\u0142u\u017csza rezerwacja\n    long_reservation = Reservation(self.guest, self.room, date(2025, 7, 1), date(2025, 7, 10))\n    payment = Payment(long_reservation, \"karta\")\n\n    self.assertEqual(payment.amount, 1800.0)  # 9 nocy \u00d7 200 z\u0142\n\n    # Dro\u017csza rezerwacja\n    expensive_room = Room(\"201\", \"suite\", 500.0, 2)\n    expensive_reservation = Reservation(self.guest, expensive_room, date(2025, 7, 1), date(2025, 7, 3))\n    payment2 = Payment(expensive_reservation, \"got\u00f3wka\")\n\n    self.assertEqual(payment2.amount, 1000.0)  # 2 noce \u00d7 500 z\u0142\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_get_summary","title":"<code>test_get_summary()</code>","text":"<p>Test dzia\u0142ania metody get_summary - czy zwraca poprawne podsumowanie p\u0142atno\u015bci.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_get_summary(self):\n    \"\"\"Test dzia\u0142ania metody get_summary - czy zwraca poprawne podsumowanie p\u0142atno\u015bci.\"\"\"\n    payment = Payment(self.reservation, \"got\u00f3wka\")\n    summary = payment.get_summary()\n\n    self.assertEqual(summary[\"payment_id\"], payment.payment_id)\n    self.assertEqual(summary[\"reservation_id\"], self.reservation.reservation_id)\n    self.assertEqual(summary[\"guest_name\"], \"Jan Kowalski\")\n    self.assertEqual(summary[\"amount\"], 400.0)\n    self.assertEqual(summary[\"method\"], \"got\u00f3wka\")\n    self.assertFalse(summary[\"paid\"])\n    self.assertIsNone(summary[\"payment_date\"])\n\n    # Po zap\u0142acie\n    payment.confirm_payment()\n    summary_paid = payment.get_summary()\n    self.assertTrue(summary_paid[\"paid\"])\n    self.assertIsNotNone(summary_paid[\"payment_date\"])\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_invalid_payment_method","title":"<code>test_invalid_payment_method()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy metoda p\u0142atno\u015bci nie jest 'karta' lub 'got\u00f3wka'.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_invalid_payment_method(self):\n    \"\"\"Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d ValueError, gdy metoda p\u0142atno\u015bci nie jest 'karta' lub 'got\u00f3wka'.\"\"\"\n    with self.assertRaises(ValueError):\n        Payment(self.reservation, \"bitcoin\")\n\n    with self.assertRaises(ValueError):\n        Payment(self.reservation, \"u\u015bmiech b\u0105belka\")\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_invalid_reservation","title":"<code>test_invalid_reservation()</code>","text":"<p>Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d TypeError, gdy rezerwacja nie jest obiektem klasy Reservation.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_invalid_reservation(self):\n    \"\"\"Weryfikacja czy program zwr\u00f3ci b\u0142\u0105d TypeError, gdy rezerwacja nie jest obiektem klasy Reservation.\"\"\"\n    with self.assertRaises(TypeError):\n        Payment(\"nie_rezerwacja\", \"karta\")\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_is_paid","title":"<code>test_is_paid()</code>","text":"<p>Test dzia\u0142ania metody is_paid - czy poprawnie zwraca status p\u0142atno\u015bci.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_is_paid(self):\n    \"\"\"Test dzia\u0142ania metody is_paid - czy poprawnie zwraca status p\u0142atno\u015bci.\"\"\"\n    payment = Payment(self.reservation, \"karta\")\n\n    # Przed zap\u0142at\u0105\n    self.assertFalse(payment.is_paid())\n\n    # Po zap\u0142acie\n    payment.confirm_payment()\n    self.assertTrue(payment.is_paid())\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_repr","title":"<code>test_repr()</code>","text":"<p>Weryfikacja czy techniczny opis obiektu zawiera po\u017c\u0105dane informacje o p\u0142atno\u015bci.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_repr(self):\n    \"\"\"Weryfikacja czy techniczny opis obiektu zawiera po\u017c\u0105dane informacje o p\u0142atno\u015bci.\"\"\"\n    payment = Payment(self.reservation, \"got\u00f3wka\")\n    rep = repr(payment)\n\n    self.assertIn(\"P\u0142atno\u015b\u0107(payment_id=\", rep)\n    self.assertIn(\"amount=400.0\", rep)\n    self.assertIn(\"method='got\u00f3wka'\", rep)\n    self.assertIn(\"paid=False\", rep)\n</code></pre>"},{"location":"reference/tests/unit/test_payment/#tests.unit.test_payment.TestPayment.test_str_representation","title":"<code>test_str_representation()</code>","text":"<p>Weryfikacja czy po wy\u015bwietleniu p\u0142atno\u015bci wida\u0107 jej status.</p> Source code in <code>tests/unit/test_payment.py</code> <pre><code>def test_str_representation(self):\n    \"\"\"Weryfikacja czy po wy\u015bwietleniu p\u0142atno\u015bci wida\u0107 jej status.\"\"\"\n    payment = Payment(self.reservation, \"karta\")\n\n    # Nieop\u0142acona\n    self.assertIn(\"oczekuje na p\u0142atno\u015b\u0107\", str(payment))\n    self.assertIn(\"karta\", str(payment))\n\n    # Op\u0142acona\n    payment.confirm_payment()\n    self.assertIn(\"op\u0142acona\", str(payment))\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/","title":"Test <code>ReservationTest</code>","text":"<p>Test jednostkowy dla klasy <code>Reservation</code>, weryfikuj\u0105cy poprawno\u015b\u0107 dzia\u0142ania logiki rezerwacyjnej.</p> <p>Zakres test\u00f3w obejmuje: - poprawne tworzenie rezerwacji na podstawie go\u015bcia, pokoju i zakresu dat, - obliczanie liczby nocy (<code>get_duration</code>) i kosztu pobytu (<code>get_total_price</code>), - poprawno\u015b\u0107 danych zwracanych przez metod\u0119 <code>get_summary</code>, - walidacj\u0119 typ\u00f3w danych (go\u015b\u0107, pok\u00f3j, daty), - obs\u0142ug\u0119 nieprawid\u0142owego zakresu dat (check-out przed check-in), - poprawno\u015b\u0107 reprezentacji tekstowej (<code>__str__</code>, <code>__repr__</code>).</p> <p>Testy zapewniaj\u0105 pe\u0142ne pokrycie funkcjonalno\u015bci klasy, w tym przypadk\u00f3w b\u0142\u0119dnych danych wej\u015bciowych.</p>"},{"location":"reference/tests/unit/test_reservation/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p> <p>Testy jednostkowe dla klasy Reservation.</p>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.setUp","title":"<code>setUp()</code>","text":"<p>Tworzy obiekty Guest i Room do wykorzystania w testach.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def setUp(self):\n    \"\"\"Tworzy obiekty Guest i Room do wykorzystania w testach.\"\"\"\n    self.guest = Guest(\"Jan\", \"Kowalski\", \"jan@example.com\", \"987654321\")\n    self.room = Room(\"101\", \"double\", 250.0, 2)\n    self.check_in = date(2025, 7, 1)\n    self.check_out = date(2025, 7, 5)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_checkout_before_checkin","title":"<code>test_checkout_before_checkin()</code>","text":"<p>Test zg\u0142oszenia b\u0142\u0119du, gdy data wymeldowania jest wcze\u015bniejsza ni\u017c zameldowania.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_checkout_before_checkin(self):\n    \"\"\"Test zg\u0142oszenia b\u0142\u0119du, gdy data wymeldowania jest wcze\u015bniejsza ni\u017c zameldowania.\"\"\"\n    with self.assertRaises(ValueError):\n        Reservation(self.guest, self.room, date(2025, 7, 5), date(2025, 7, 1))\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_create_reservation","title":"<code>test_create_reservation()</code>","text":"<p>Test poprawnego utworzenia rezerwacji.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_create_reservation(self):\n    \"\"\"Test poprawnego utworzenia rezerwacji.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    self.assertIsInstance(reservation.reservation_id, str)\n    self.assertEqual(reservation.guest, self.guest)\n    self.assertEqual(reservation.room, self.room)\n    self.assertEqual(reservation.check_in, self.check_in)\n    self.assertEqual(reservation.check_out, self.check_out)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_get_duration","title":"<code>test_get_duration()</code>","text":"<p>Test poprawnego obliczenia liczby nocy.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_get_duration(self):\n    \"\"\"Test poprawnego obliczenia liczby nocy.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    self.assertEqual(reservation.get_duration(), 4)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_get_summary","title":"<code>test_get_summary()</code>","text":"<p>Test poprawno\u015bci danych zwracanych przez get_summary.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_get_summary(self):\n    \"\"\"Test poprawno\u015bci danych zwracanych przez get_summary.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    summary = reservation.get_summary()\n    self.assertEqual(summary[\"guest_name\"], \"Jan Kowalski\")\n    self.assertEqual(summary[\"room_number\"], \"101\")\n    self.assertEqual(summary[\"check_in\"], \"2025-07-01\")\n    self.assertEqual(summary[\"check_out\"], \"2025-07-05\")\n    self.assertEqual(summary[\"nights\"], 4)\n    self.assertEqual(summary[\"total_price\"], 1000.0)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_get_total_price","title":"<code>test_get_total_price()</code>","text":"<p>Test obliczenia ca\u0142kowitego kosztu pobytu.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_get_total_price(self):\n    \"\"\"Test obliczenia ca\u0142kowitego kosztu pobytu.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    self.assertEqual(reservation.get_total_price(), 1000.0)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_invalid_date_type","title":"<code>test_invalid_date_type()</code>","text":"<p>Test zg\u0142oszenia b\u0142\u0119du, gdy daty s\u0105 w z\u0142ym formacie.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_invalid_date_type(self):\n    \"\"\"Test zg\u0142oszenia b\u0142\u0119du, gdy daty s\u0105 w z\u0142ym formacie.\"\"\"\n    with self.assertRaises(TypeError):\n        Reservation(self.guest, self.room, \"2025-07-01\", \"2025-07-05\")\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_invalid_guest_type","title":"<code>test_invalid_guest_type()</code>","text":"<p>Test zg\u0142oszenia b\u0142\u0119du, gdy go\u015b\u0107 nie jest instancj\u0105 klasy Guest.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_invalid_guest_type(self):\n    \"\"\"Test zg\u0142oszenia b\u0142\u0119du, gdy go\u015b\u0107 nie jest instancj\u0105 klasy Guest.\"\"\"\n    with self.assertRaises(TypeError):\n        Reservation(\"NieGo\u015b\u0107\", self.room, self.check_in, self.check_out)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_invalid_room_type","title":"<code>test_invalid_room_type()</code>","text":"<p>Test zg\u0142oszenia b\u0142\u0119du, gdy pok\u00f3j nie jest instancj\u0105 klasy Room.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_invalid_room_type(self):\n    \"\"\"Test zg\u0142oszenia b\u0142\u0119du, gdy pok\u00f3j nie jest instancj\u0105 klasy Room.\"\"\"\n    with self.assertRaises(TypeError):\n        Reservation(self.guest, \"NiePok\u00f3j\", self.check_in, self.check_out)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_repr_representation","title":"<code>test_repr_representation()</code>","text":"<p>Test czy metoda repr zawiera kluczowe dane techniczne.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_repr_representation(self):\n    \"\"\"Test czy metoda __repr__ zawiera kluczowe dane techniczne.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    rep = repr(reservation)\n    self.assertIn(\"reservation_id\", rep)\n    self.assertIn(\"zameldowanie=2025-07-01\", rep)\n    self.assertIn(\"wymeldowanie=2025-07-05\", rep)\n</code></pre>"},{"location":"reference/tests/unit/test_reservation/#tests.unit.test_reservation.ReservationTest.test_str_representation","title":"<code>test_str_representation()</code>","text":"<p>Test czy metoda str zawiera kluczowe informacje.</p> Source code in <code>tests/unit/test_reservation.py</code> <pre><code>def test_str_representation(self):\n    \"\"\"Test czy metoda __str__ zawiera kluczowe informacje.\"\"\"\n    reservation = Reservation(self.guest, self.room, self.check_in, self.check_out)\n    self.assertIn(\"Jan Kowalski\", str(reservation))\n    self.assertIn(\"101\", str(reservation))\n</code></pre>"},{"location":"reference/tests/unit/test_room/","title":"Test <code>TestRoom</code>","text":"<p>Test jednostkowy dla klasy <code>Room</code>, sprawdzaj\u0105cy poprawno\u015b\u0107 tworzenia obiektu pokoju oraz walidacj\u0119 jego atrybut\u00f3w.</p> <p>Zakres test\u00f3w obejmuje: - prawid\u0142ow\u0105 inicjalizacj\u0119 pokoju z numerem, typem, cen\u0105 i pojemno\u015bci\u0105, - obs\u0142ug\u0119 b\u0142\u0119d\u00f3w przy niepoprawnych danych wej\u015bciowych (pusty numer, b\u0142\u0119dna cena, pojemno\u015b\u0107 jako tekst itd.), - dzia\u0142anie metody <code>get_details()</code> \u2013 zwracaj\u0105cej s\u0142ownik z informacjami o pokoju, - poprawno\u015b\u0107 reprezentacji tekstowej metod <code>__str__()</code> i <code>__repr__()</code>.</p> <p>Testy zapewniaj\u0105 kompletne pokrycie scenariuszy dla klasy <code>Room</code>, w tym przypadk\u00f3w brzegowych i niepoprawnych danych.</p>"},{"location":"reference/tests/unit/test_room/#dokumentacja-techniczna","title":"Dokumentacja techniczna","text":"<p>               Bases: <code>TestCase</code></p>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_nieprawidlowa_cena","title":"<code>test_nieprawidlowa_cena()</code>","text":"<p>Test sprawdzaj\u0105cy czy ujemna lub niepoprawna cena powoduje wyj\u0105tek.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_nieprawidlowa_cena(self):\n    \"\"\"Test sprawdzaj\u0105cy czy ujemna lub niepoprawna cena powoduje wyj\u0105tek.\"\"\"\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"dwuosobowy\", -100.0, 2)\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"dwuosobowy\", \"za darmo\", 2)\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_nieprawidlowa_pojemnosc","title":"<code>test_nieprawidlowa_pojemnosc()</code>","text":"<p>Test sprawdza czy niepoprawna pojemno\u015b\u0107 (0, &lt;0, tekst) podnosi wyj\u0105tek.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_nieprawidlowa_pojemnosc(self):\n    \"\"\"Test sprawdza czy niepoprawna pojemno\u015b\u0107 (0, &lt;0, tekst) podnosi wyj\u0105tek.\"\"\"\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"dwuosobowy\", 250.0, 0)\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"dwuosobowy\", 250.0, -1)\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"dwuosobowy\", 250.0, \"dwie osoby\")\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_nieprawidlowy_numer_pokoju","title":"<code>test_nieprawidlowy_numer_pokoju()</code>","text":"<p>Test sprawdzaj\u0105cy, czy podanie pustego numeru pokoju lub warto\u015bci None podnosi wyj\u0105tek.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_nieprawidlowy_numer_pokoju(self):\n    \"\"\"Test sprawdzaj\u0105cy, czy podanie pustego numeru pokoju lub warto\u015bci None podnosi wyj\u0105tek.\"\"\"\n    with self.assertRaises(ValueError):\n        Room(\"\", \"dwuosobowy\", 250.0, 2)\n    with self.assertRaises(ValueError):\n        Room(None, \"dwuosobowy\", 250.0, 2)\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_nieprawidlowy_typ_pokoju","title":"<code>test_nieprawidlowy_typ_pokoju()</code>","text":"<p>Test sprawdzaj\u0105cy czy podanie pustego typu pokoju lub jako None podnosi wyj\u0105tek.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_nieprawidlowy_typ_pokoju(self):\n    \"\"\"Test sprawdzaj\u0105cy czy podanie pustego typu pokoju lub jako None podnosi wyj\u0105tek.\"\"\"\n    with self.assertRaises(ValueError):\n        Room(\"101\", \"\", 250.0, 2)\n    with self.assertRaises(ValueError):\n        Room(\"101\", None, 250.0, 2)\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_poprawne_utworzenie_pokoju","title":"<code>test_poprawne_utworzenie_pokoju()</code>","text":"<p>Test poprawno\u015bci utworzenia obiektu pok\u00f3j sk\u0142adaj\u0105cego si\u0119 z takich danych jak: numer pokoju, rodzaj pokoju, cena za noc oraz maksymaln\u0105 ilo\u015b\u0107 go\u015bci w tym pokoju.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_poprawne_utworzenie_pokoju(self):\n    \"\"\"Test poprawno\u015bci utworzenia obiektu pok\u00f3j sk\u0142adaj\u0105cego si\u0119 z takich danych jak:\n     numer pokoju, rodzaj pokoju, cena za noc oraz maksymaln\u0105 ilo\u015b\u0107 go\u015bci w tym pokoju.\"\"\"\n    pokoj = Room(\"101\", \"dwuosobowy\", 250.0, 2)\n    self.assertEqual(pokoj.number, \"101\")\n    self.assertEqual(pokoj.room_type, \"dwuosobowy\")\n    self.assertEqual(pokoj.price_per_night, 250.0)\n    self.assertEqual(pokoj.capacity, 2)\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_str_i_repr","title":"<code>test_str_i_repr()</code>","text":"<p>Sprawdza poprawno\u015b\u0107 dzia\u0142ania metod str i repr.</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_str_i_repr(self):\n    \"\"\"Sprawdza poprawno\u015b\u0107 dzia\u0142ania metod __str__ i __repr__.\"\"\"\n    pokoj = Room(\"303\", \"jednoosobowy\", 180.0, 1)\n    self.assertEqual(str(pokoj), \"Pok\u00f3j: 303 (jednoosobowy), 1 os., 180.00 z\u0142/noc\")\n    self.assertIn(\"Pok\u00f3j(numer='303'\", repr(pokoj))\n</code></pre>"},{"location":"reference/tests/unit/test_room/#tests.unit.test_room.TestRoom.test_szczegoly_pokoju","title":"<code>test_szczegoly_pokoju()</code>","text":"<p>Testuje poprawno\u015b\u0107 danych zwracanych przez metod\u0119 get_details().</p> Source code in <code>tests/unit/test_room.py</code> <pre><code>def test_szczegoly_pokoju(self):\n    \"\"\"Testuje poprawno\u015b\u0107 danych zwracanych przez metod\u0119 get_details().\"\"\"\n    pokoj = Room(\"202\", \"apartament\", 400.0, 3)\n    oczekiwane = {\n        \"numer\": \"202\",\n        \"typ_pokoju\": \"apartament\",\n        \"cena_za_noc\": 400.0,\n        \"pojemnosc\": 3\n    }\n    self.assertEqual(pokoj.get_details(), oczekiwane)\n</code></pre>"}]}